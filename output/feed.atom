<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<id>https://red-sand-078a6ea03.3.azurestaticapps.net/</id>
	<title />
	<link rel="self" href="https://red-sand-078a6ea03.3.azurestaticapps.net/" />
	<rights>Copyright James Brewster© 2023</rights>
	<updated>2023-04-26T15:42:21Z</updated>
	<logo>https://red-sand-078a6ea03.3.azurestaticapps.net/media/images/header01.png</logo>
	<entry>
		<id>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/patterns-and-antipatterns/microservices</id>
		<title>Microservices</title>
		<link href="https://red-sand-078a6ea03.3.azurestaticapps.net/posts/patterns-and-antipatterns/microservices" />
		<link rel="enclosure" type="image" href="https://red-sand-078a6ea03.3.azurestaticapps.net/media/images/header01.png" />
		<updated>2023-04-26T15:40:58Z</updated>
		<content>&lt;h2 id="pattern-overview"&gt;Pattern Overview&lt;/h2&gt;
&lt;p&gt;This pattern is designed to provide reliable service at a large scale. It does
this by providing no single point of failure, allowing its components to
scale independently of each other and segregating information to provide
security.&lt;/p&gt;
&lt;h3 id="illustration"&gt;Illustration&lt;/h3&gt;
&lt;p&gt;&lt;img src="https://red-sand-078a6ea03.3.azurestaticapps.net/media/images/microservices-patterns.png" alt="microservices pattern, learn.microsoft.com"&gt;
&lt;em&gt;Model of a Monolith to Microservices migration, showing sub-patterns&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This is a reference microservices pattern, showing the possible use of sub-patterns.&lt;/p&gt;
&lt;h2 id="benefits-of-this-pattern"&gt;Benefits of this pattern&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Scale and resilience in each service.
Safe deployment of updates to individual services.&lt;/li&gt;
&lt;li&gt;Separation of services, allowing changes to be made locally and quickly, with
minimal impact on other services.&lt;/li&gt;
&lt;li&gt;The ability for several teams to work together on different areas. Can support
regular and frequent changes.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id="drawbacks-to-this-pattern"&gt;Drawbacks to this pattern&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;It can be complex, quickly.&lt;/li&gt;
&lt;li&gt;Overwhelming for a small number of teams, due to a large number of
components.&lt;/li&gt;
&lt;li&gt;The Danger of component sprawl if services are over-specialized.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id="when-to-use-this-pattern"&gt;When to use this pattern&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;This pattern is for applications that need to grow, which need to manage
their costs and support a large degree of change and experimentation.&lt;/li&gt;
&lt;li&gt;When reliability is critical to business, reputation or safety.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id="when-to-avoid-this-pattern"&gt;When to avoid this pattern&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Because you want to be down with the kids, and you think it's cool.&lt;/li&gt;
&lt;li&gt;Because you want to use the 'best' type of technology and work at Google.&lt;/li&gt;
&lt;li&gt;For a simple application, which doesn't have a high probability of needing
change, addition or integration.&lt;/li&gt;
&lt;li&gt;For an application that won't be making lots of changes, with lots of
active users.&lt;/li&gt;
&lt;li&gt;For your Blog.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id="assumptions"&gt;Assumptions&lt;/h2&gt;
&lt;p&gt;In choosing this pattern, you ruled out simpler options as not being capable.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You have time and space for teams to find their way; this is hard and it
will go wrong.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id="anti-patterns-of-the-microservices-architecture"&gt;Anti-Patterns of the microservices architecture&lt;/h2&gt;
&lt;h3 id="distributed-monolith"&gt;Distributed Monolith&lt;/h3&gt;
&lt;p&gt;When you split a monolith, don't let your services become dependent on each
or several other microservices. If changes in services require redeployment or
change in other services, you've built a distributed monolith.
Lastly, over-dependency can also manifest in long deployment times, as too many
changes have to occur at once. Sometimes it shows that deployment has to
happen in a particular order.&lt;/p&gt;
&lt;p&gt;This is a &lt;a href="http://www.laputan.org/mud/mud.html#BigBallOfMud"&gt;Big-Ball-Of-Mud&lt;/a&gt; that also has network-level latencies to
deal with now.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="overly-chatty"&gt;Overly Chatty&lt;/h3&gt;
&lt;p&gt;Another risk is the amount of communication. Services are distributed, so calls
between them take time. Overly chatty services are not performant; the latency
can kill the performance. Following &lt;a href="https://en.wikipedia.org/wiki/SOLID"&gt;SOLID&lt;/a&gt; principles can help here.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="shared-persistence"&gt;Shared Persistence&lt;/h3&gt;
&lt;p&gt;A monolith typically requires a large shared data store. Microservices should
each have their own data store, to avoid resource contention. Each store should
be accessible only by the associated service. Any communication needs to be via
the API interfaces.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="heavyweight-services"&gt;Heavyweight services&lt;/h3&gt;
&lt;p&gt;Building too much into each service makes them slow. Build/latency delays kick
in and you are back to building monoliths.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="no-api-gateway"&gt;No API Gateway&lt;/h3&gt;
&lt;p&gt;Data Interfaces need to be identifiable, they need to be managed, and they need
authentication. It has to be something you can find to query.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="entangled-data"&gt;Entangled Data&lt;/h3&gt;
&lt;p&gt;Isolate the data inside the application.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="improper-versioning"&gt;Improper Versioning&lt;/h3&gt;
&lt;p&gt;Build API versions into your URI calls.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="sub-patterns"&gt;Sub-patterns&lt;/h2&gt;
&lt;p&gt;A successful migration of monolith to microservices will likely use many
different patterns. Some common ones are linked here.&lt;/p&gt;
&lt;h3 id="ambassador"&gt;Ambassador&lt;/h3&gt;
&lt;p&gt;An Ambassador sits between two services and negotiates. Typically a proxy
service can interpret. An ambassador is often used to offload or mask client
interoperability issues. An ambassador is a specialized sidecar.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://learn.microsoft.com/en-us/azure/architecture/patterns/ambassador"&gt;Ambassador Pattern&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="anti-corruption"&gt;Anti-corruption&lt;/h3&gt;
&lt;p&gt;When two systems don't properly understand each other, an Anti-corruption
layer can be introduced to protect the new architecture.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://learn.microsoft.com/en-us/azure/architecture/patterns/anti-corruption-layer"&gt;Anti-corruption Layer pattern&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="backends-for-frontends"&gt;Backends for Frontends&lt;/h3&gt;
&lt;p&gt;Sometimes, it's just quicker to write APIs that deal with specific clients. It
might take more maintenance, but that can be ok.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://learn.microsoft.com/en-us/azure/architecture/patterns/backends-for-frontends"&gt;Backends for Frontends pattern&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="bulkhead"&gt;Bulkhead&lt;/h3&gt;
&lt;p&gt;Bulkheads are used on ships to prevent water from a hull breach from flooding
the whole ship. Keep things separate, (like connection pools or hardware)
so a greedy neighbour can't flood the whole ship.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://learn.microsoft.com/en-us/azure/architecture/patterns/bulkhead"&gt;Bulkhead Pattern&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="gateways"&gt;Gateways&lt;/h3&gt;
&lt;p&gt;Using a gateway for your microservices offers several benefits, by making your
collection of services look like a single web server.&lt;/p&gt;
&lt;h4 id="aggregation"&gt;Aggregation&lt;/h4&gt;
&lt;p&gt;Clients can connect to a single endpoint to make requests, which are then
forwarded to different microservices. This makes the client connection light
and easy&lt;/p&gt;
&lt;p&gt;&lt;a href="https://learn.microsoft.com/en-us/azure/architecture/patterns/gateway-aggregation"&gt;Gateway Aggregation&lt;/a&gt;&lt;/p&gt;
&lt;h4 id="offloading"&gt;Offloading&lt;/h4&gt;
&lt;p&gt;The gateway can offload shared functionality, such as authentication, TLS
certificates or issuing Authorisation tokens.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://learn.microsoft.com/en-us/azure/architecture/patterns/gateway-offloading"&gt;Gateway Offloading&lt;/a&gt;&lt;/p&gt;
&lt;h4 id="routing"&gt;Routing&lt;/h4&gt;
&lt;p&gt;The service all appears to come from a single domain, so much easier for a
client to manage connections to and from the service, improving security.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://learn.microsoft.com/en-us/azure/architecture/patterns/gateway-routing"&gt;Gateway Routing&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="sidecar"&gt;Sidecar&lt;/h3&gt;
&lt;p&gt;deploy helper apps into separate containers to encapsulate them, but keep
them close for performance.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://learn.microsoft.com/en-us/azure/architecture/patterns/sidecar"&gt;Sidecar Pattern&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="strangler"&gt;Strangler&lt;/h3&gt;
&lt;p&gt;Refactor over time, by gradually replacing specific services.&lt;/p&gt;
&lt;p&gt;&lt;a href="xref:strangler-pattern"&gt;Strangler Pattern&lt;/a&gt;&lt;/p&gt;
</content>
		<summary>Microservices architecture is a 'super-pattern', which aims to minimise dependencies and promote scalability across multiple dimensions.</summary>
	</entry>
	<entry>
		<id>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/patterns-and-antipatterns/strangler-pattern</id>
		<title>Strangler pattern</title>
		<link href="https://red-sand-078a6ea03.3.azurestaticapps.net/posts/patterns-and-antipatterns/strangler-pattern" />
		<link rel="enclosure" type="image" href="https://red-sand-078a6ea03.3.azurestaticapps.net/media/images/header01.png" />
		<updated>2023-04-26T15:40:44Z</updated>
		<content>&lt;p&gt;This pattern is used to migrate functionality from an older app to a new one. Typically, this is done for a monolith to a microservices model but works for any app.&lt;/p&gt;
&lt;h2 id="pattern-overview"&gt;Pattern Overview&lt;/h2&gt;
&lt;p&gt;Replacing a large monolithic system is complex and risky. The strangler pattern builds new functionality using modern design patterns alongside the monolith. A proxy is used to integrate the user experience and make sure the aligned application makes sense to end users. Over time the monolith is slowly broken down.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://th.bing.com/th/id/OIP.xkG2oQy-yOaQWbW6QlEwKgHaLH?pid=ImgDet&amp;amp;rs=1" alt="The Strangler Fig Tree"&gt;&lt;/p&gt;
&lt;p&gt;Inspired by the Australian Strangler Fig Tree, which roots in the upper branches and grows down and around the tree, eventually taking root and destroying the original host tree.&lt;/p&gt;
&lt;h3 id="illustration"&gt;Illustration&lt;/h3&gt;
&lt;p&gt;If you build something to help transition, take it away when you're finished with it.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://red-sand-078a6ea03.3.azurestaticapps.net/media/images/strangler-pattern-example.png" alt="Strangler pattern, over time"&gt;&lt;/p&gt;
&lt;p&gt;The first step shows the monolith, and then a companion service is added alongside, behind a proxy. The next step adds more services, transitioning over to the new model. The last step shows the monolith being removed, along with the proxy.&lt;/p&gt;
&lt;h2 id="benefits-of-this-pattern"&gt;Benefits of this pattern&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Provides a way to scale a solution over multiple dimensions.&lt;/li&gt;
&lt;li&gt;Delivers gradual value over time, with lower risk than a rewrite.&lt;/li&gt;
&lt;li&gt;Supports and allows for rollback.&lt;/li&gt;
&lt;li&gt;Uses versioned APIs, to reduce the need for collaboration.&lt;/li&gt;
&lt;li&gt;Supports legacy integrations.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="drawbacks-to-this-pattern"&gt;Drawbacks to this pattern&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Potential for increased latency because of new service dependencies.&lt;/li&gt;
&lt;li&gt;Additional proxy decreases availability through multiplicative failure effect.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="when-to-use-this-pattern"&gt;When to use this pattern&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Use the strangler for versioning and migration of services.&lt;/li&gt;
&lt;li&gt;Use an existing proxy, such as Nginx, as scaffolding during the migration.&lt;/li&gt;
&lt;li&gt;Manage the service rules during migration.&lt;/li&gt;
&lt;li&gt;Remove rules as no longer needed and decommission the proxy when done.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="when-to-avoid-this-pattern"&gt;When to avoid this pattern&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;If you have to add a facade, then don't also add a proxy as it increases the call depth and hits latency poorly.&lt;/li&gt;
&lt;li&gt;If latency is a concern, this won't help in the interim.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="approach"&gt;Approach&lt;/h2&gt;
&lt;p&gt;You can implement this pattern in two separate ways, scaling along the service domains, or between the new and old services. Ideally, both together works well.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Scaling along the service domains allows new services to be stood up and integrated.&lt;/li&gt;
&lt;li&gt;Scaling alongside the existing services allows for rollback and A/B testing between the new and old services, by sending a portion of calls to the new service.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Scaling along both these axis allows the target state to scale effectively.&lt;/p&gt;
&lt;h2 id="assumptions"&gt;Assumptions&lt;/h2&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://martinfowler.com/bliki/StranglerFigApplication.html"&gt;Martin Folwer - Strangler Fig Application&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.microsoft.com/en-us/azure/architecture/patterns/strangler-fig"&gt;Microsoft - Azure Architecture, Strangler Fig Pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://akfpartners.com/growth-blog/strangler-pattern-dos-and-donts"&gt;AKF Partners - Strangler Patterns: Dos and Don'ts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
		<summary>This pattern is used to migrate functionality from an older app to a new one</summary>
	</entry>
	<entry>
		<id>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/requirements/usability</id>
		<title>Usability</title>
		<link href="https://red-sand-078a6ea03.3.azurestaticapps.net/posts/requirements/usability" />
		<link rel="enclosure" type="image" href="https://red-sand-078a6ea03.3.azurestaticapps.net/media/images/header01.png" />
		<updated>2023-04-26T14:38:22Z</updated>
		<content>&lt;ul&gt;
&lt;li&gt;Can the audience complete their job in a single visit?&lt;/li&gt;
&lt;li&gt;How quickly can they complete their task?&lt;/li&gt;
&lt;li&gt;Does the design require training? Is it intuitive and guided enough to be easy to complete on the first attempt?&lt;/li&gt;
&lt;li&gt;How many errors does a typical user make? Are they clear and any remedial actions clear?&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	<entry>
		<id>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/requirements/performance</id>
		<title>Performance</title>
		<link href="https://red-sand-078a6ea03.3.azurestaticapps.net/posts/requirements/performance" />
		<link rel="enclosure" type="image" href="https://red-sand-078a6ea03.3.azurestaticapps.net/media/images/header01.png" />
		<updated>2023-04-26T14:37:49Z</updated>
		<content>&lt;p&gt;Applications need to perform within the expectations and requirements of a user. Most users will give up on a website if it's even a few seconds delayed. On the other hand, a responsive site encourages engagement.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It's important to understand the expected workload of your system and the expected growth. This needs to be a baseline, expected service for a given user.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Do expect it to be successful, but don’t build in excess fixed resources; that's just wasteful. Make sure performance and scalability are considered together.
Ignore third-party delivery times. You need to either find a service which meets your requirements or you need to use an adequate pattern to abstract this. You have minimal control of the service, so ensure you protect yourself from it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Typically, we would look at the 95th percentile of results for these, so you don't have to be 100% perfect, but you should be 95% on target, to be 100%.
a. A user log-in to the system should be completed within 1 second.
b. All pages should render 'on the glass' within 1 second.
The system can support at least 25 concurrent 'views' of pages per second.&lt;/p&gt;
</content>
		<summary>&lt;p&gt;Applications need to perform within the expectations and requirements of a user. Most users will give up on a website if it's even a few seconds delayed. On the other hand, a responsive site encourages engagement.&lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/requirements/traceability</id>
		<title>Traceability</title>
		<link href="https://red-sand-078a6ea03.3.azurestaticapps.net/posts/requirements/traceability" />
		<link rel="enclosure" type="image" href="https://red-sand-078a6ea03.3.azurestaticapps.net/media/images/header01.png" />
		<updated>2023-04-26T13:11:04Z</updated>
		<content>&lt;p&gt;Access to applications is auditable. Logs are kept about who accesses data, what they do with it and when.&lt;/p&gt;
&lt;p&gt;Log actions and output informative messages.&lt;/p&gt;
</content>
		<summary>&lt;p&gt;Access to applications is auditable. Logs are kept about who accesses data, what they do with it and when.&lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/principles/be-suspicious</id>
		<title>Be Suspicious</title>
		<link href="https://red-sand-078a6ea03.3.azurestaticapps.net/posts/principles/be-suspicious" />
		<link rel="enclosure" type="image" href="https://red-sand-078a6ea03.3.azurestaticapps.net/media/images/header01.png" />
		<updated>2023-04-26T00:00:00Z</updated>
		<content>&lt;p&gt;Check and verify the input. Look for tainted input.&lt;/p&gt;
&lt;p&gt;With a modern application, there is no network boundary. It's down to identities. So check people are who they say they are and do what you expect them to.&lt;/p&gt;
</content>
		<summary>&lt;p&gt;Check and verify the input. Look for tainted input.&lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/requirements/security/secure-configuration</id>
		<title>Secure Configuration</title>
		<link href="https://red-sand-078a6ea03.3.azurestaticapps.net/posts/requirements/security/secure-configuration" />
		<link rel="enclosure" type="image" href="https://red-sand-078a6ea03.3.azurestaticapps.net/media/images/header01.png" />
		<updated>2023-04-26T00:00:00Z</updated>
		<content>&lt;p&gt;This applies to servers, applications and cloud services.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Based on the NCSC.gov.uk 'Cyber Essentials Requirements for Infrastructure, January 2022. Modified to remove end user devices.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="requirement"&gt;Requirement&lt;/h2&gt;
&lt;p&gt;Computers and network devices must be properly configured to reduce the level of inherent vulnerabilities and only provide the services required to fulfil their role.&lt;/p&gt;
&lt;p&gt;Default configurations are often insecure, to make initial access easier. We must ensure any commodity services are reconfigured to ensure security.&lt;/p&gt;
&lt;p&gt;This can include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Default accounts, potentially with additional permissions.&lt;/li&gt;
&lt;li&gt;weak or known initial account passwords.&lt;/li&gt;
&lt;li&gt;Unnecessary or legacy services, which are easier to exploit.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These must be disabled or reconfigured.&lt;/p&gt;
&lt;h2 id="acceptance-criteria"&gt;Acceptance Criteria&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;On inspection, third-party components should not have common or default accounts and passwords enabled.&lt;/li&gt;
&lt;li&gt;Where possible, configuration should be backed-up and stored securely, to allow for re-verification.&lt;/li&gt;
&lt;li&gt;The configuration of a system has been reviewed with one or more peers and has been approved.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="audience"&gt;Audience&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;System designers and implementors.&lt;/li&gt;
&lt;li&gt;Organisational management&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="details"&gt;Details&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Owner: Andy Sheldon, Chief Technology Officer&lt;/li&gt;
&lt;li&gt;Author: James Brewster, Enterprise Architect&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rationale"&gt;Rationale&lt;/h2&gt;
&lt;p&gt;One of the most common ways to access a system is to use a default account or configuration, which has been left unsecured. By ensuring we verify these accounts and their configuration, we can help improve security and minimise breaches.&lt;/p&gt;
&lt;h2 id="related-principles"&gt;Related Principles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="xref:be-suspicious"&gt;Be Suspicious&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="xref:least-privilege"&gt;Least Privilege&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="xref:shift-security-left"&gt;Shift Security Left&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
		<summary>&lt;p&gt;This applies to servers, applications and cloud services.&lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/requirements/maintainability</id>
		<title>Maintainability</title>
		<link href="https://red-sand-078a6ea03.3.azurestaticapps.net/posts/requirements/maintainability" />
		<link rel="enclosure" type="image" href="https://red-sand-078a6ea03.3.azurestaticapps.net/media/images/header01.png" />
		<updated>2023-04-26T00:00:00Z</updated>
		<content>&lt;p&gt;The system should be designed and developed with maintainability in mind. The system should be easy to look after, diagnose and support, throughout its lifecycle.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Read the &lt;a href="xref:requirements-checklist"&gt;Requirements Check-List&lt;/a&gt; article for an introduction to requirements.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="requirement"&gt;Requirement&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Design and implement the system using a known set of conventions.&lt;/li&gt;
&lt;li&gt;The system is well-documented and the source code has relevant comments.&lt;/li&gt;
&lt;li&gt;The software has been designed to be modular and reusable.&lt;/li&gt;
&lt;li&gt;Implement approved logging, monitoring and testing tools.&lt;/li&gt;
&lt;li&gt;The deployment follows standard technology hosting patterns.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="acceptance-criteria"&gt;Acceptance Criteria&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Designs for the system are reviewed and approved by at least two others.&lt;/li&gt;
&lt;li&gt;Software source code is documented using a known standard or convention.&lt;/li&gt;
&lt;li&gt;Software designs have been inspected for opportunities for reuse and modularity.&lt;/li&gt;
&lt;li&gt;The system must include logging ability.&lt;/li&gt;
&lt;li&gt;An outline design of areas to be monitored on the system should be included.&lt;/li&gt;
&lt;li&gt;The system must have a documented set of test cases.&lt;/li&gt;
&lt;li&gt;The system must be based on an approved hosting pattern and document how the pattern is followed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="audience"&gt;Audience&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;System designers and software engineers.&lt;/li&gt;
&lt;li&gt;IT Professionals and operational engineers.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="details"&gt;Details&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Owner: Andy Sheldon, Chief Technology Officer&lt;/li&gt;
&lt;li&gt;Author: James Brewster, Enterprise Architect&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rationale"&gt;Rationale&lt;/h2&gt;
&lt;p&gt;This NFR ensures that the system can adapt to changing needs, bugs can be fixed and support costs can be kept down.&lt;/p&gt;
&lt;h2 id="related-principles"&gt;Related Principles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="xref:control-technical-diversity"&gt;Control Technical Diversity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="xref:interoperability"&gt;Interoperability&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
		<summary>&lt;p&gt;The system should be designed and developed with maintainability in mind. The system should be easy to look after, diagnose and support, throughout its lifecycle.&lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/requirements/security/user-access-control</id>
		<title>User Access Control</title>
		<link href="https://red-sand-078a6ea03.3.azurestaticapps.net/posts/requirements/security/user-access-control" />
		<link rel="enclosure" type="image" href="https://red-sand-078a6ea03.3.azurestaticapps.net/media/images/header01.png" />
		<updated>2023-04-26T00:00:00Z</updated>
		<content>&lt;p&gt;This applies to servers, applications and cloud services.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Based on the NCSC.gov.uk 'Cyber Essentials Requirements for Infrastructure, January 2022. Modified to remove end user devices.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="requirement"&gt;Requirement&lt;/h2&gt;
&lt;p&gt;Access to a business system, or its data, is protected by a centrally managed named user account. The account can be configured to only allow access to the relevant data and processes.&lt;/p&gt;
&lt;p&gt;Accounts with special access privileges have an enhanced level of verification through a second factor, such as a verification message to a different, associated device or approval by a second party.&lt;/p&gt;
&lt;p&gt;Any account should have more than one named individual present. Owners and administrators need to be able to disable an account, with relevant verification.&lt;/p&gt;
&lt;h2 id="acceptance-criteria"&gt;Acceptance Criteria&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Any Authorisation is not performed by the application but by a dedicated authorisation application.&lt;/li&gt;
&lt;li&gt;Applications obey trusted authorisation tokens from that application.&lt;/li&gt;
&lt;li&gt;Tokens only grant access to the relevant data, necessary for the role the user has.&lt;/li&gt;
&lt;li&gt;Roles are granular and can be subdivided where necessary.&lt;/li&gt;
&lt;li&gt;Application and data access is protected, ensuring a second check.&lt;/li&gt;
&lt;li&gt;Special access privileges, such as deleting an account, require a second factor or verification.&lt;/li&gt;
&lt;li&gt;Options for Multi-factor authentication should be present and are strongly recommended.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="audience"&gt;Audience&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;System designers and implementors.&lt;/li&gt;
&lt;li&gt;Organisational management&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="details"&gt;Details&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Owner: Andy Sheldon, Chief Technology Officer&lt;/li&gt;
&lt;li&gt;Author: James Brewster, Enterprise Architect&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rationale"&gt;Rationale&lt;/h2&gt;
&lt;p&gt;Ensuring our customer's data is secure is important. Ensuring they can manage access to that data is important. Giving them a feeling of security and trust is important.&lt;/p&gt;
&lt;p&gt;Reflecting our brand values, our commitment to security and our capability to manage data and services for them is important.&lt;/p&gt;
&lt;h2 id="related-principles"&gt;Related Principles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="xref:be-suspicious"&gt;Be Suspicious&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="xref:least-privilege"&gt;Least Privilege&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="xref:shift-security-left"&gt;Shift Security Left&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
		<summary>&lt;p&gt;This applies to servers, applications and cloud services.&lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/requirements/non-repudiation</id>
		<title>Non-repudiation</title>
		<link href="https://red-sand-078a6ea03.3.azurestaticapps.net/posts/requirements/non-repudiation" />
		<link rel="enclosure" type="image" href="https://red-sand-078a6ea03.3.azurestaticapps.net/media/images/header01.png" />
		<updated>2023-04-24T15:03:09Z</updated>
		<content>&lt;p&gt;Where possible, use immutable objects and data which can't be repudiated. Make sure we can trust our systems and our data.&lt;/p&gt;
</content>
		<summary>&lt;p&gt;Where possible, use immutable objects and data which can't be repudiated. Make sure we can trust our systems and our data.&lt;/p&gt;</summary>
	</entry>
</feed>