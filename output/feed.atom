<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<id>https://red-sand-078a6ea03.3.azurestaticapps.net/</id>
	<title />
	<link rel="self" href="https://red-sand-078a6ea03.3.azurestaticapps.net/" />
	<rights>Copyright James Brewster© 2023</rights>
	<updated>2023-05-11T12:50:24Z</updated>
	<logo>https://red-sand-078a6ea03.3.azurestaticapps.net/media/header01.png</logo>
	<entry>
		<id>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/patterns-and-antipatterns/gateways</id>
		<title>Gateways</title>
		<link href="https://red-sand-078a6ea03.3.azurestaticapps.net/posts/patterns-and-antipatterns/gateways" />
		<link rel="enclosure" type="image" href="https://red-sand-078a6ea03.3.azurestaticapps.net/media/header01.png" />
		<updated>2023-05-10T15:02:58Z</updated>
		<content>&lt;p&gt;Exposing multiple services out of a container cluster can cause issues and complexity as you scale out the number of services. The Gateway pattern uses a proxy to manage several complexities and performance improvements.&lt;/p&gt;
&lt;p&gt;The gateway pattern has three main facets, whish are discussed and can be implemented separately, but typically all on the same gateway(s).&lt;/p&gt;
&lt;h2 id="when-to-avoid"&gt;When to Avoid&lt;/h2&gt;
&lt;p&gt;Don't use this pattern for small sites, or even a handful of services; the overhead will be excessive.&lt;/p&gt;
&lt;h2 id="when-to-use"&gt;When to use&lt;/h2&gt;
&lt;p&gt;Use this pattern when you get into more than a handful of services with multiple teams working across them, with a moderate to large user-base.&lt;/p&gt;
&lt;h3 id="routing"&gt;Routing&lt;/h3&gt;
&lt;p&gt;One way to connect clients to services is direct. A direct client-to-microservice architecture provides the fewest moving parts. However, each service requires a TCP port to connect to. As each service is using a different port, this can start to prove difficult to manage, especially for security-conscious customers, who need to minimise exposure.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://red-sand-078a6ea03.3.azurestaticapps.net/media/direct-to-client.png" alt="Direct-to-Client Routing. Count those endpoints!"&gt;&lt;/p&gt;
&lt;p&gt;This can be even more complex when multiple services start to be available, which offer the same functionality. Which service do I connect to? How do I find the right service? It can be further worsened if different versions of the same service start to be in use, such as A/B testing.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://red-sand-078a6ea03.3.azurestaticapps.net/media/gateway-routing.png" alt="Gateway-Routing, just one way in or out"&gt;&lt;/p&gt;
&lt;p&gt;Gateway Aggregation makes use of a proxy service, in-front of the microservice endpoints, redirecting pages and folders, hiding details of the production layout away from the outside world, so changes can be made and introduced in a lot simpler manner.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://learn.microsoft.com/en-us/azure/architecture/patterns/gateway-routing"&gt;Gateway Routing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="offloading"&gt;Offloading&lt;/h3&gt;
&lt;p&gt;Using a gateway allows shared services or cross-cutting concerns to be handled in line for multiple services. These can be things like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Authentication or authorisation&lt;/li&gt;
&lt;li&gt;SSL Offloading and certificate management&lt;/li&gt;
&lt;li&gt;Network Monitoring and throttling&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In some cases, these items might need special skills or segregation of responsibilities. In others, it is more effective to do these things once.&lt;/p&gt;
&lt;p&gt;In either case, the use of a gateway to offload functionality mustn't create a dependency between the gateway and any downstream services, or it risks becoming a blocker to development.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://learn.microsoft.com/en-us/azure/architecture/patterns/gateway-offloading"&gt;Gateway Offloading&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="aggregation"&gt;Aggregation&lt;/h3&gt;
&lt;p&gt;Gateway aggregation allows a client to minimise unnecessary chatter, especially valuable over the internet or mobile networks, when communicating with a service. By collecting requests and responses and dispatching them in batches, updates and performance can be better managed, whilst the service appears to come from a common host.&lt;/p&gt;
&lt;p&gt;Done properly, aggregation allows a server to manage client connections and improve performance.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://learn.microsoft.com/en-us/azure/architecture/patterns/gateway-aggregation"&gt;Gateway Aggregation&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
</content>
		<summary>Once you have decomposed your web services, how do you keep the user experience connected, easy and secure?</summary>
	</entry>
	<entry>
		<id>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/patterns-and-antipatterns/microservices</id>
		<title>Microservices</title>
		<link href="https://red-sand-078a6ea03.3.azurestaticapps.net/posts/patterns-and-antipatterns/microservices" />
		<link rel="enclosure" type="image" href="https://red-sand-078a6ea03.3.azurestaticapps.net/media/header01.png" />
		<updated>2023-05-10T10:37:47Z</updated>
		<content>&lt;p&gt;Microservices are a way to build applications and are used by some of the biggest sites and systems online, such as Netflix and Amazon. They let systems be updated safely and scale well. But they are complex and require firm principles in place to work properly.&lt;/p&gt;
&lt;h2 id="pattern-overview"&gt;Pattern Overview&lt;/h2&gt;
&lt;p&gt;Microservices architecture is an architectural style that structures an application as a collection of services that are independently deployable, loosely coupled, organized around business capabilities and owned by a small team. In simple terms, microservices are a specific method of designing software systems to structure a single application as a collection of loosely coupled services.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://red-sand-078a6ea03.3.azurestaticapps.net/media/microservices-patterns.png" alt="Microservices Pattern"&gt;
&lt;em&gt;Model of a Monolith to Microservices migration, showing sub-patterns&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This is a reference pattern, with several optional sub-patterns.&lt;/p&gt;
&lt;h2 id="benefits-of-this-pattern"&gt;Benefits of this pattern&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Scale and resilience in each service.&lt;/li&gt;
&lt;li&gt;Safe deployment of updates to individual services.&lt;/li&gt;
&lt;li&gt;Separation of services, allowing changes to be made locally and quickly, with
minimal impact on other services.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="drawbacks-to-this-pattern"&gt;Drawbacks to this pattern&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;It can be complex, quickly.&lt;/li&gt;
&lt;li&gt;Overwhelming for a small number of teams, due to a large number of
components.&lt;/li&gt;
&lt;li&gt;The Danger of component sprawl if services are over-specialized.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="when-to-use-this-pattern"&gt;When to use this pattern&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;This pattern is for applications that need to grow, which need to manage
their costs and support a large degree of change and experimentation.&lt;/li&gt;
&lt;li&gt;When reliability is critical to business, reputation or safety.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="when-to-avoid-this-pattern"&gt;When to avoid this pattern&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Because you want to be down with the kids, and you think it's cool.&lt;/li&gt;
&lt;li&gt;Because you want to use the 'best' type of technology and work at Google.&lt;/li&gt;
&lt;li&gt;For a simple application, which doesn't have a high probability of needing
change, addition or integration.&lt;/li&gt;
&lt;li&gt;For an application that won't be making lots of changes, with lots of
active users.&lt;/li&gt;
&lt;li&gt;For your Blog.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="approach"&gt;Approach&lt;/h2&gt;
&lt;p&gt;Typically, microservices architectures require a good understanding of the business domain model, before development can begin. This ensures that services align with specific functions, which can be built in line with the business. &lt;a href="https://en.wikipedia.org/wiki/Conway%27s_law"&gt;Conways Law&lt;/a&gt; states that any organisation which designs a system will design one that looks like the organisation. This needs to be considered as if your microservices don't align with your business model, it will be very difficult to succeed.&lt;/p&gt;
&lt;h2 id="assumptions"&gt;Assumptions&lt;/h2&gt;
&lt;p&gt;In choosing this pattern, you ruled out simpler options as not being capable.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You have time and space for teams to find their way; this is hard and it
will go wrong.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="related-articles"&gt;Related Articles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="xref:microservices-anti-patterns"&gt;Microservices Anti-Patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.microsoft.com/en-us/azure/architecture/microservices/"&gt;Microsoft - Microservices design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://akfpartners.com/growth-blog/microservice-architecture-principles"&gt;AKF Partners - Microservices Architecture Principles&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
		<summary>Microservices are a collection of application services that are independently deployable, loosely coupled and organized around business capabilities.</summary>
	</entry>
	<entry>
		<id>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/patterns-and-antipatterns/bulkhead</id>
		<title>Bulkhead</title>
		<link href="https://red-sand-078a6ea03.3.azurestaticapps.net/posts/patterns-and-antipatterns/bulkhead" />
		<link rel="enclosure" type="image" href="https://red-sand-078a6ea03.3.azurestaticapps.net/media/header01.png" />
		<updated>2023-05-10T00:00:00Z</updated>
		<content>&lt;p&gt;The Bulkhead pattern designs safe operation into applications, to ensure that a single failure cannot cause the loss of the whole application.&lt;/p&gt;
&lt;p&gt;There are different approaches to implementing a bulkhead, which all have the same outcome. It depends on how you need to contain the fault. It's easier to explain with some examples.&lt;/p&gt;
&lt;h3 id="isolating-faults"&gt;Isolating Faults&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Customers are divided over different container hosts, so state and session are spread across more than one physical instance. If the instance is lost, only a subset of customers are affected.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="limiting-thread-concurrency"&gt;Limiting Thread Concurrency&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Netflix use a system called Hystrix, which limits the number of concurrent threads to any given system. Effectively, Hysterix figures out when a component starts to reach capacity and limits the upstream threads, to bring the load down.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When designing around the bulkhead pattern, assume that there will be failures somewhere and assume that will have an impact. But try to work to contain and minimise that impact.&lt;/p&gt;
&lt;p&gt;To that end:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Minimise dependencies; share nearly nothing!&lt;/li&gt;
&lt;li&gt;Isolate faults, to limit fallout.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The pattern was popularised in the book, Release It! by M. Nygard.&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/30391809/what-is-bulkhead-pattern-used-by-hystrix"&gt;What is Bulkhead Pattern used by Hystrix? (2018) Stack Overflow.&lt;/a&gt; Accessed: 10 May 2023&lt;/li&gt;
&lt;li&gt;&lt;a href="https://akfpartners.com/growth-blog/bulkhead-pattern"&gt;Abbot, M. (2019). Microservice Bulkhead Pattern - Dos and Don’ts.&lt;/a&gt; Accessed 10 May 2023&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.oreilly.com/library/view/release-it-2nd/9781680504552/"&gt;Nygard, M.T. (2018) Release It! Pragmatic Bookshelf.‌&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.microsoft.com/en-us/azure/architecture/patterns/bulkhead"&gt;Bulkhead Pattern&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
		<summary>The Bulkhead pattern encourages us to create barriers between services, to prevent disasters from affecting the whole application.</summary>
	</entry>
	<entry>
		<id>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/patterns-and-antipatterns/microservices-anti-patterns</id>
		<title>Microservices Anti-patterns</title>
		<link href="https://red-sand-078a6ea03.3.azurestaticapps.net/posts/patterns-and-antipatterns/microservices-anti-patterns" />
		<link rel="enclosure" type="image" href="https://red-sand-078a6ea03.3.azurestaticapps.net/media/header01.png" />
		<updated>2023-05-10T00:00:00Z</updated>
		<content>&lt;h2 id="anti-patterns-of-the-microservices-architecture"&gt;Anti-Patterns of the microservices architecture&lt;/h2&gt;
&lt;p&gt;A selection of common mistakes found in the wild.&lt;/p&gt;
&lt;h3 id="calls-in-series"&gt;Calls in Series&lt;/h3&gt;
&lt;p&gt;Many microservices architecture failures are the result of not properly understanding the way failure works in distributed systems. To calculate the SLA of multiple systems, you must multiply the availability of each dependent service together.&lt;/p&gt;
&lt;p&gt;If a system is built to have an availability of 99.5%, but it relies upon another service, with the same SLA of 99.5%, then the total SLA of that system is 99.0025%. If a third dependency is introduced with the same SLA of 99.5%, then we are down to 98.5%. This quickly adds up and gets exponentially worse.&lt;/p&gt;
&lt;p&gt;It's important to use asynchronous calls to prevent this, rather than calls in series. Incorporate a message bus or an event framework, and instead of waiting, your services can remain resilient.&lt;/p&gt;
&lt;p&gt;Reference: &lt;a href="https://akfpartners.com/growth-blog/microservice-anti-pattern-calls-in-series-the-xmas-tree-light-anti-pattern"&gt;AKF Partners: Microservices Anti-Patterns, 2019&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="distributed-monolith"&gt;Distributed Monolith&lt;/h3&gt;
&lt;p&gt;When you split a monolith, don't let your services become dependent on each
or several other microservices. If changes in services require redeployment or
change in other services, you've built a distributed monolith.
Lastly, over-dependency can also manifest in long deployment times, as too many
changes have to occur at once. Sometimes it shows that deployment has to
happen in a particular order.&lt;/p&gt;
&lt;p&gt;This is a &lt;a href="http://www.laputan.org/mud/mud.html#BigBallOfMud"&gt;Big-Ball-Of-Mud&lt;/a&gt; that also has network-level latencies to
deal with now.&lt;/p&gt;
&lt;h3 id="overly-chatty"&gt;Overly Chatty&lt;/h3&gt;
&lt;p&gt;The amount of communication between services must be considered. Services are distributed, so calls between them take time. Overly chatty services are not performant; the latency can kill the performance. Following &lt;a href="https://en.wikipedia.org/wiki/SOLID"&gt;SOLID&lt;/a&gt; principles can help here.&lt;/p&gt;
&lt;h3 id="shared-persistence"&gt;Shared Persistence&lt;/h3&gt;
&lt;p&gt;A monolith typically requires a large shared data store. As organisations redesign to microservices, thoughts around persistence may be overlooked, and traditional patterns followed. When you tie a service and a database together, you affect reliability. There is a recommendation to adopt a 0-1 database per service model.&lt;/p&gt;
&lt;p&gt;For many types of computing, such as Azure Functions, or AWS Lambda, databases may be unnecessary. If compute uses documents instead or responds to events or messages, then all the persistence could be encapsulated.&lt;/p&gt;
&lt;p&gt;in these cases, avoiding any real persistence helps to improve reliability, by removing unnecessary dependencies.&lt;/p&gt;
&lt;p&gt;Reference: &lt;a href="https://akfpartners.com/growth-blog/microservice-Architecture-principle-one-or-zero-databases-per-service"&gt;AKF Partners, Microservices Architecture Principle: One or Zero Databases per Service. 2022&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="entangled-data"&gt;Entangled Data&lt;/h3&gt;
&lt;p&gt;When all the services in your application can use database connections to get whatever they need, it becomes harder to unpick and separate them as services scale. The database starts to become a bottleneck, changes slow down as people need to extend things.. the natural next step is to separate the services into individual databases. Except, you have no idea what you need to separate. Congratulations, you have entangled data.&lt;/p&gt;
&lt;p&gt;To ensure you can scale as you need to, the data needs to be segregated into clear domains, which are readily identifiable and easy to access.&lt;/p&gt;
&lt;p&gt;A successful remedy to this problem can be to restrict inter-domain communication to API calls. By ensuring cross-service database calls are eliminated and contracted, defined borders are put in place, segregation is much easier to manage.&lt;/p&gt;
&lt;p&gt;This anti-pattern was seen as such a threat to the growth and agility of Amazon, that Jeff Bezos &lt;a href="https://nordicapis.com/the-bezos-api-mandate-amazons-manifesto-for-externalization/"&gt;threatened to fire anyone who followed it&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Reference: &lt;a href="https://www.techtarget.com/searchapparchitecture/tip/4-deadly-microservices-antipatterns-that-ruin-migration#:%7E:text=In%20an%20entangled%20data%20antipattern%2C%20all%20the%20services,modules%20and%20make%20structural%20changes%20to%20your%20architecture."&gt;TechTarget.com, 4 microservices antipatterns that ruin migration. 2020&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="improper-versioning"&gt;Improper Versioning&lt;/h3&gt;
&lt;p&gt;As part of an API strategy, contracted APIs enable a consumer to understand what they get and how they access that data. A mature API model allows a consumer to retrieve the right data and update the right systems, without needing to understand the underlying system. But, when the API changes, the integration will break.&lt;/p&gt;
&lt;p&gt;If the API supports clear versioning, then the consumer can stipulate a version and the service can respond. Having a contractual way to manage versioning and deprecation is critical to making resilient services.&lt;/p&gt;
&lt;p&gt;Microsoft suggests the following main versioning options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;URI&lt;/li&gt;
&lt;li&gt;Header&lt;/li&gt;
&lt;li&gt;Query string&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With URI-based versioning, the version is in the URI. If omitted the server would default to the most current, supported version.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GET https://api.service.com/store/v1.1/Products
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Header-based versioning encapsulates the version in the HTML header. You would include a custom header in the HTML HEAD tag, such as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Api-version: 1.0
Api-version: 1.1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With Query-string versioning, the version requested is an optional query string:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GET https://api.service.com/products/Products?api-version=v1.1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These methods are all supported in Azure API Manager.&lt;/p&gt;
&lt;h3 id="references"&gt;References&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://learn.microsoft.com/en-us/azure/api-management/api-management-versions"&gt;Microsoft.com - API Management&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
		<summary>Describes common anti-patterns or easy pitfalls of building a microservices application</summary>
	</entry>
	<entry>
		<id>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/patterns-and-antipatterns/ambassador-pattern</id>
		<title>Ambassador pattern</title>
		<link href="https://red-sand-078a6ea03.3.azurestaticapps.net/posts/patterns-and-antipatterns/ambassador-pattern" />
		<link rel="enclosure" type="image" href="https://red-sand-078a6ea03.3.azurestaticapps.net/media/header01.png" />
		<updated>2023-05-10T00:00:00Z</updated>
		<content>&lt;p&gt;An out-of-process proxy that facilitates communication with a distant service. Colocated, usually in the same host/cluster to improve performance.&lt;/p&gt;
&lt;h2 id="description"&gt;Description&lt;/h2&gt;
&lt;p&gt;The ambassador pattern is used when a service needs some additional functionality, but it cannot be easily included alongside the main application. Often this is because the service was created by a third party, or is 'of an age'. An ambassador is a specialised sidecar, which is responsible for communicating with a service for the application.&lt;/p&gt;
&lt;h2 id="benefits"&gt;Benefits&lt;/h2&gt;
&lt;p&gt;An ambassador can extend a legacy service with new functionality to allow it to function alongside a new architecture.&lt;/p&gt;
&lt;h2 id="examples"&gt;Examples&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Adding asynchronous responses to a legacy synchronous process.&lt;/li&gt;
&lt;li&gt;To make a REST call to legacy API.&lt;/li&gt;
&lt;li&gt;Masking an insecure connection, to ensure that the public network is secured.&lt;/li&gt;
&lt;li&gt;Integrating a circuit breaker for a partner-hosted service.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="concerns"&gt;Concerns&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Adding an ambassador often entails creating a dependency. Sometimes the ambassador needs to be managed by a separate team, but will then require a release dependency.&lt;/li&gt;
&lt;li&gt;Is the added latency going to be workable with this application?&lt;/li&gt;
&lt;li&gt;Do you want to create a shared ambassador or spawn an instance per client?&lt;/li&gt;
&lt;li&gt;Consider a way to pass context to ease faultfinding.&lt;/li&gt;
&lt;li&gt;Hosting the ambassador close to the applications to minimise latency.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="when-to-use"&gt;When to use&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;If you have a legacy or partner service which cannot easily be replaced or updated to support necessary functionality, using an ambassador as a wrapper can assist in ensuring the service can work well with the rest of the application architecture.&lt;/li&gt;
&lt;li&gt;When you need to change the type of request/response to meet the need of a client, such as supporting stronger authentication or encryption, managing latency or aggregating responses to a chatty system.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="when-to-avoid"&gt;When to avoid&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;This pattern adds latency, so avoid it in a latency-sensitive environment.&lt;/li&gt;
&lt;li&gt;If only a single language is consuming the features; a library may be a better option.&lt;/li&gt;
&lt;li&gt;If connectivity features cannot be adequately optimised.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="approach"&gt;Approach&lt;/h2&gt;
&lt;p&gt;Microsoft cites an example of an ambassador which encapsulates:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Routing&lt;/li&gt;
&lt;li&gt;Circuit Breaker&lt;/li&gt;
&lt;li&gt;Logging&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To enable a legacy app to integrate to cloud services, and with mobile clients.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://learn.microsoft.com/en-us/azure/architecture/patterns/ambassador#example"&gt;Ambassador Example - learn.microsoft.com&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://learn.microsoft.com/en-us/azure/architecture/patterns/sidecar"&gt;Sidecar Pattern&lt;/a&gt; - An ambassador is a specialised sidecar.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.microsoft.com/en-us/azure/architecture/patterns/ambassador"&gt;Ambassador Pattern&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
		<summary>An ambassador is often used to offload or mask client interoperability issues.</summary>
	</entry>
	<entry>
		<id>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/patterns-and-antipatterns/strangler-pattern</id>
		<title>Strangler pattern</title>
		<link href="https://red-sand-078a6ea03.3.azurestaticapps.net/posts/patterns-and-antipatterns/strangler-pattern" />
		<link rel="enclosure" type="image" href="https://red-sand-078a6ea03.3.azurestaticapps.net/media/header01.png" />
		<updated>2023-05-02T00:00:00Z</updated>
		<content>&lt;p&gt;This pattern is used to migrate functionality from an older app to a new one. Typically, this is done for a monolith to a microservices model but works for any app.&lt;/p&gt;
&lt;h2 id="pattern-overview"&gt;Pattern Overview&lt;/h2&gt;
&lt;p&gt;Replacing a large monolithic system is complex and risky. The strangler pattern builds new functionality using modern design patterns alongside the monolith. A proxy is used to integrate the user experience and make sure the aligned application makes sense to end users. Over time the monolith is slowly broken down.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://farm4.staticflickr.com/3356/3600794227_4916f9924e_z.jpg" alt="The Strangler Fig Tree"&gt;&lt;/p&gt;
&lt;p&gt;Inspired by the Australian Strangler Fig Tree, which roots in the upper branches and grows down and around the tree, eventually taking root and destroying the original host tree.&lt;/p&gt;
&lt;p&gt;If you build something to help transition, take it away when you're finished with it.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://red-sand-078a6ea03.3.azurestaticapps.net/media/strangler-pattern-example.png" alt="Strangler pattern, over time"&gt;&lt;/p&gt;
&lt;p&gt;The first step shows the monolith, and then a companion service is added alongside, behind a proxy. The next step adds more services, transitioning over to the new model. The last step shows the monolith being removed, along with the proxy.&lt;/p&gt;
&lt;h2 id="benefits-of-this-pattern"&gt;Benefits of this pattern&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Provides a way to scale a solution over multiple dimensions.&lt;/li&gt;
&lt;li&gt;Delivers gradual value over time, with lower risk than a rewrite.&lt;/li&gt;
&lt;li&gt;Supports and allows for rollback.&lt;/li&gt;
&lt;li&gt;Uses versioned APIs, to reduce the need for collaboration.&lt;/li&gt;
&lt;li&gt;Supports legacy integrations.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="drawbacks-to-this-pattern"&gt;Drawbacks to this pattern&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Potential for increased latency because of new service dependencies.&lt;/li&gt;
&lt;li&gt;Additional proxy decreases availability through multiplicative failure effect.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="when-to-use-this-pattern"&gt;When to use this pattern&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Use the strangler for versioning and migration of services.&lt;/li&gt;
&lt;li&gt;Use an existing proxy, such as Nginx, as scaffolding during the migration.&lt;/li&gt;
&lt;li&gt;Manage the service rules during migration.&lt;/li&gt;
&lt;li&gt;Remove rules as no longer needed and decommission the proxy when done.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="when-to-avoid-this-pattern"&gt;When to avoid this pattern&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;If you have to add a facade, then don't also add a proxy as it increases the call depth and hits latency poorly.&lt;/li&gt;
&lt;li&gt;If latency is a concern, this won't help in the interim.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="approach"&gt;Approach&lt;/h2&gt;
&lt;p&gt;You can implement this pattern in two separate ways, scaling along the service domains, or between the new and old services. Ideally, both together works well.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Scaling along the service domains allows new services to be stood up and integrated.&lt;/li&gt;
&lt;li&gt;Scaling alongside the existing services allows for rollback and A/B testing between the new and old services, by sending a portion of calls to the new service.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Scaling along both these axis allows the target state to scale effectively.&lt;/p&gt;
&lt;h2 id="assumptions"&gt;Assumptions&lt;/h2&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://martinfowler.com/bliki/StranglerFigApplication.html"&gt;Martin Folwer - Strangler Fig Application&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.microsoft.com/en-us/azure/architecture/patterns/strangler-fig"&gt;Microsoft - Azure Architecture, Strangler Fig Pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://akfpartners.com/growth-blog/strangler-pattern-dos-and-donts"&gt;AKF Partners - Strangler Patterns: Dos and Don'ts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
		<summary>This pattern is used to migrate functionality from an older app to a new one.</summary>
	</entry>
	<entry>
		<id>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/requirements/reliability</id>
		<title>Reliability</title>
		<link href="https://red-sand-078a6ea03.3.azurestaticapps.net/posts/requirements/reliability" />
		<link rel="enclosure" type="image" href="https://red-sand-078a6ea03.3.azurestaticapps.net/media/header01.png" />
		<updated>2023-05-02T00:00:00Z</updated>
		<content>&lt;blockquote&gt;
&lt;p&gt;reliability, noun, /rɪˌlaɪ.əˈbɪl.ə.ti/. The quality of being able to be trusted or believed because of working or behaving well.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Reliable things do what you expect when you expect them. By ensuring we build reliable software, customers can easily access and use them.&lt;/p&gt;
&lt;p&gt;Reliability is one of the non-functional requirements (NFR) that defines the ability of the system to properly perform the required functions under predefined conditions for a certain period. It is commonly expressed through probability percentages predicting chances that the system won’t experience critical failure under normal usage and during the set time&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Read the &lt;a href="xref:requirements-checklist"&gt;Requirements Check-List&lt;/a&gt; article for an introduction to requirements.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="requirement"&gt;Requirement&lt;/h2&gt;
&lt;p&gt;Our systems will be available for 99.9% of the year.&lt;/p&gt;
&lt;h2 id="acceptance-criteria"&gt;Acceptance Criteria&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Measured over one year, the uptime of the application will exceed 99.9%&lt;/li&gt;
&lt;li&gt;During the first year, this will be extrapolated backwards and reviewed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="audience"&gt;Audience&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;System designers and software engineers.&lt;/li&gt;
&lt;li&gt;IT Professionals and operational engineers.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="details"&gt;Details&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Owner: Andy Sheldon, Chief Technology Officer&lt;/li&gt;
&lt;li&gt;Author: James Brewster, Enterprise Architect&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rationale"&gt;Rationale&lt;/h2&gt;
&lt;p&gt;TODO:&lt;/p&gt;
&lt;h2 id="related-principles"&gt;Related Principles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="xref:ease-of-use"&gt;Ease of Use&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
		<summary>&lt;p&gt;reliability, noun, /rɪˌlaɪ.əˈbɪl.ə.ti/. The quality of being able to be trusted or believed because of working or behaving well.&lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/requirements/usability</id>
		<title>Usability</title>
		<link href="https://red-sand-078a6ea03.3.azurestaticapps.net/posts/requirements/usability" />
		<link rel="enclosure" type="image" href="https://red-sand-078a6ea03.3.azurestaticapps.net/media/header01.png" />
		<updated>2023-04-28T00:00:00Z</updated>
		<content>&lt;p&gt;A usable system encourages use and trust.&lt;/p&gt;
&lt;p&gt;Usability, noun, /ˌjuːzəˈbɪləti/. Something easy to use, or the degree to which it is easy to use.&lt;/p&gt;
&lt;h2 id="requirement"&gt;Requirement&lt;/h2&gt;
&lt;p&gt;The system must have a user interface that is easy to navigate and understand.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The system should be set up to allow a user to complete their tasks quickly and directly.&lt;/li&gt;
&lt;li&gt;The interface needs to be intuitive so that minimal instruction is needed. If there is any area which is ambiguous or tricky, help needs to be included.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="acceptance-criteria"&gt;Acceptance Criteria&lt;/h2&gt;
&lt;p&gt;By demonstration&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The user interface must be intuitive and easy to navigate.&lt;/li&gt;
&lt;li&gt;The user interface must be easy to understand.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="audience"&gt;Audience&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;System designers and software engineers.&lt;/li&gt;
&lt;li&gt;IT Professionals and operational engineers.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="details"&gt;Details&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Owner: Andy Sheldon, Chief Technology Officer&lt;/li&gt;
&lt;li&gt;Author: James Brewster, Enterprise Architect&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rationale"&gt;Rationale&lt;/h2&gt;
&lt;p&gt;This requirement is important because it ensures that users can easily use the system without requiring extensive training or support.&lt;/p&gt;
&lt;h2 id="related-principles"&gt;Related Principles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="xref:ease-of-use"&gt;Ease-Of-Use&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
		<summary>The system must be intuitive and easy to use for all users.</summary>
	</entry>
	<entry>
		<id>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/requirements/security/owasp</id>
		<title>OWASP ASVS</title>
		<link href="https://red-sand-078a6ea03.3.azurestaticapps.net/posts/requirements/security/owasp" />
		<link rel="enclosure" type="image" href="https://red-sand-078a6ea03.3.azurestaticapps.net/media/header01.png" />
		<updated>2023-04-27T00:00:00Z</updated>
		<content>&lt;p&gt;The standard provides a basis for testing application technical security controls, as well as any technical security controls in the environment, that are relied on to protect against vulnerabilities such as Cross-Site Scripting (XSS) and SQL injection. This standard can be used to establish a level of confidence in the security of Web applications.&lt;/p&gt;
&lt;p&gt;The Roadmap for version 5 of the OWASP ASVS is available here: &lt;a href="https://github.com/OWASP/ASVS/wiki/Roadmap-to-version-5.0"&gt;https://github.com/OWASP/ASVS/wiki/Roadmap-to-version-5.0&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="requirements"&gt;Requirements&lt;/h2&gt;
&lt;p&gt;The following controls should be considered for every application:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/OWASP/ASVS/blob/v4.0.3/4.0/en/0x10-V1-Architecture.md"&gt;Architecture, design and threat modelling.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/OWASP/ASVS/blob/v4.0.3/4.0/en/0x11-V2-Authentication.md"&gt;Authentication.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/OWASP/ASVS/blob/v4.0.3/4.0/en/0x12-V3-Session-management.md"&gt;Session management.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/OWASP/ASVS/blob/v4.0.3/4.0/en/0x12-V4-Access-Control.md"&gt;Access Control.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/OWASP/ASVS/blob/v4.0.3/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md"&gt;Input Validation, output encoding, and parameterization.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/OWASP/ASVS/blob/v4.0.3/4.0/en/0x14-V6-Cryptography.md"&gt;Cryptography at rest.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/OWASP/ASVS/blob/v4.0.3/4.0/en/0x15-V7-Error-Logging.md"&gt;Error handling and logging.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/OWASP/ASVS/blob/v4.0.3/4.0/en/0x16-V8-Data-Protection.md"&gt;Data protection in transit.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/OWASP/ASVS/blob/v4.0.3/4.0/en/0x17-V9-Communications.md"&gt;Secure communication.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/OWASP/ASVS/blob/v4.0.3/4.0/en/0x18-V10-Malicious.md"&gt;Malicious Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/OWASP/ASVS/blob/v4.0.3/4.0/en/0x19-V11-BusLogic.md"&gt;Business Logic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/OWASP/ASVS/blob/v4.0.3/4.0/en/0x20-V12-Files-Resources.md"&gt;Files and Resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/OWASP/ASVS/blob/v4.0.3/4.0/en/0x21-V13-API.md"&gt;API and Web Service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/OWASP/ASVS/blob/v4.0.3/4.0/en/0x22-V14-Config.md"&gt;Configuration&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="audience"&gt;Audience&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;System designers and software engineers.&lt;/li&gt;
&lt;li&gt;IT Professionals and operational engineers.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="details"&gt;Details&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Owner: Andy Sheldon, Chief Technology Officer&lt;/li&gt;
&lt;li&gt;Author: James Brewster, Enterprise Architect&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rationale"&gt;Rationale&lt;/h2&gt;
&lt;p&gt;The primary aim of the OWASP Application Security Verification Standard (ASVS) Project is to normalize the range in the coverage and level of rigour available in the market when it comes to performing application security verification using a commercially-workable open standard. &lt;a href="https://owasp.org/www-pdf-archive/OWASP_ASVS_Standard_2008.pdf"&gt;This standard can be used to establish a level of confidence in the security of web applications and services&lt;/a&gt;. The OWASP ASVS Project provides developers with a &lt;a href="https://owasp.org/www-project-application-security-verification-standard/"&gt;list of requirements for secure development&lt;/a&gt;. By using this standard, developers can ensure that their applications are secure and that they meet &lt;a href="https://www.briskinfosec.com/blogs/blogsdetail/What-is-the-difference-between-OWASP-Top-10-and-ASVS-Security-Audit"&gt;industry standards for security&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;OWASP V4.0.3 Stable release, 27/04/2023. &lt;a href="https://github.com/OWASP/ASVS/tree/v4.0.3/4.0"&gt;https://github.com/OWASP/ASVS/tree/v4.0.3/4.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;OWASP Application Security Verification Standard, 27/04/2023. &lt;a href="https://owasp.org/www-project-application-security-verification-standard/"&gt;https://owasp.org/www-project-application-security-verification-standard/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
		<summary>The OWASP ASVS project provides developers with a list of requirements for secure development and testable security controls.</summary>
	</entry>
	<entry>
		<id>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/requirements/scalability</id>
		<title>Scalability</title>
		<link href="https://red-sand-078a6ea03.3.azurestaticapps.net/posts/requirements/scalability" />
		<link rel="enclosure" type="image" href="https://red-sand-078a6ea03.3.azurestaticapps.net/media/header01.png" />
		<updated>2023-04-27T00:00:00Z</updated>
		<content>&lt;p&gt;This non-functional requirement is concerned with the ability of the system to handle an increasing amount of work and adapt to a lessening workload.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Read the &lt;a href="xref:requirements-checklist"&gt;Requirements Check-List&lt;/a&gt; article for an introduction to requirements.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="requirement"&gt;Requirement&lt;/h2&gt;
&lt;p&gt;The system must be able to scale to adequately support the business&lt;/p&gt;
&lt;h2 id="acceptance-criteria"&gt;Acceptance Criteria&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The system must be able to handle a minimum of 1000 concurrent users without any significant degradation in performance.&lt;/li&gt;
&lt;li&gt;On demonstration, the system should be able to scale up and down.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="audience"&gt;Audience&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;System designers and software engineers.&lt;/li&gt;
&lt;li&gt;IT Professionals and operational engineers.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="details"&gt;Details&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Owner: Andy Sheldon, Chief Technology Officer&lt;/li&gt;
&lt;li&gt;Author: James Brewster, Enterprise Architect&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rationale"&gt;Rationale&lt;/h2&gt;
&lt;p&gt;Rationale: Scalability is important because it ensures that the system can continue to function effectively as the workload increases.&lt;/p&gt;
&lt;h2 id="related-principles"&gt;Related Principles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="xref:ease-of-use"&gt;Ease-Of-Use&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="more-information"&gt;More Information&lt;/h2&gt;
&lt;p&gt;AKF Partners introduced the concept of the scale cube in their 2018 Blog post on scalability. This is a scaling model which encourages design and engineering teams to think about scale in three axis:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;X-Axis, Technical architecture layering. Avoid single points of failure, build out multiple nodes which can serve requests and balance load.&lt;/li&gt;
&lt;li&gt;Y-Axis, Functional Decomposition. Break an application into components (microservices) and keep these different items in swim lanes.&lt;/li&gt;
&lt;li&gt;Z-Axis, Data Partitioning. Separate user data for scale, availability and testing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://red-sand-078a6ea03.3.azurestaticapps.net/media/Scale_Cube.png" alt="Scale Cube, AKF Partners, 2018"&gt;&lt;/p&gt;
&lt;p&gt;Each axis in the cube needs to be able to scale and teams should keep this idea in mind as they design and build systems.&lt;/p&gt;
&lt;p&gt;A monolith application is the antithesis of the scale cube. An accurate realisation of this principle would be a Microservices architecture, hosted on a container platform, with a sharded database model.&lt;/p&gt;
&lt;p&gt;Scaling a large system is hard, and potentially expensive. Making changes can take too long and the required upgrades can be costly. Using a microservices model with small, stateless services which can scale independently allows each service change to be small, and the underlying costs to grow in smaller steps.&lt;/p&gt;
&lt;p&gt;Another difficulty is the complexity of a change. As more developers join a project, typically the project gets slower, not faster! Environment changes take longer, pull requests increase, and meetings take longer. The net effect is that large teams create too many dependencies, increasing development times. &lt;a href="https://en.wikipedia.org/wiki/Brooks%27s_law"&gt;Brooks Law&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When systems are large, they become increasingly complex, and in many cases, by this point, there are only 1-2 people who understand the system. This creates additional Single Points of Failure, in those people. It makes change riskier and more likely to require regression testing.&lt;/p&gt;
&lt;p&gt;For more information on this model, please refer to the AKF partners site, linked below.&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://akfpartners.com/growth-blog/the-scalability-cube-your-guide-to-evaluating-scalability"&gt;The Scalability Cube, Your Guide to Evaluating Scalability&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
		<summary>The system must be able to handle an increasing amount of work without any significant degradation in performance.</summary>
	</entry>
</feed>