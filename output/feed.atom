<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<id>https://red-sand-078a6ea03.3.azurestaticapps.net/</id>
	<title />
	<link rel="self" href="https://red-sand-078a6ea03.3.azurestaticapps.net/" />
	<rights>Copyright James Brewster© 2023</rights>
	<updated>2023-09-18T09:21:56Z</updated>
	<logo>https://red-sand-078a6ea03.3.azurestaticapps.net/media/header01.png</logo>
	<entry>
		<id>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/solutions/architecture-practise</id>
		<title>Overview of the Architecture Practice</title>
		<author>
			<name>James Brewster</name>
		</author>
		<link href="https://red-sand-078a6ea03.3.azurestaticapps.net/posts/solutions/architecture-practise" />
		<link rel="enclosure" type="image" href="https://red-sand-078a6ea03.3.azurestaticapps.net/media/header01.png" />
		<updated>2023-06-06T00:00:00Z</updated>
		<content>&lt;p&gt;Software and systems architects provide guidance and governance of a technology organisation by modelling the organisation, its departments, capabilities, and processes and then mapping technology into them to ensure that the business has an optimised environment, which can adapt to its needs and isn't onerous to look after.&lt;/p&gt;
&lt;p&gt;Traditional approaches to this take time and go against the agile philosophy to avoid Big Up Front Design (BUFD). How best to support developers in an agile world?&lt;/p&gt;
&lt;p&gt;The common concept in an agile development organisation is 'Emergent Architecture.' But what does that mean? You follow a model more akin to evolution than planning and interfere if you see things dangerous to the organisation. You use history as a lesson but accept what has happened and accept that, as people, we can never attain perfection.&lt;/p&gt;
&lt;h2 id="in-theory"&gt;In theory&lt;/h2&gt;
&lt;p&gt;As development teams self-organize, the architecture role is to support decision-making and ensure good decisions thrive while poor choices don't.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://red-sand-078a6ea03.3.azurestaticapps.net/media/architecture-process-bpmn.png" alt="Architecture Process - BPMN"&gt;&lt;/p&gt;
&lt;p&gt;This concept uses the ADR or Architectural Decision Record for teams to record and track key decisions and context.&lt;/p&gt;
&lt;p&gt;When a team has to decide something, they create a work item in Jira/Git/DevOps (other work trackers are available). This item can outline the problem in short:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;To support US12345, we need to host semi-structured data, which will be used to render a dynamic quote on screen.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Whenever the team decides how development will proceed, they write it down in their work system. ADRs are covered in more detail &lt;a href="xref:architecture-decision-records"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In the context of hosting semi-structured quote data&lt;/p&gt;
&lt;p&gt;Facing the need to understand different tariffs and quote them together&lt;/p&gt;
&lt;p&gt;We decided to host this data as JSON in a document databaseusing MongoDB interfaces hosted on Azure Cosmos.&lt;/p&gt;
&lt;p&gt;And against using MongoDB in a seperate Container, as it would require management&lt;/p&gt;
&lt;p&gt;or against using CosmosDB, as the interface is being deprecated.&lt;/p&gt;
&lt;p&gt;To Acheive US12345, hosting and retreiving semi-structured quote data.&lt;/p&gt;
&lt;p&gt;Accepting that there is a cost requirement in using Cosmos DB hosting&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The architecture team review and steer ADRs. ADRs are like the tweet format of designs; they encompass small decisions and choices with just enough context and reasoning to explain to a new starter why something happened. A significant benefit is that they can all be queried and exported and used to describe the project's thinking over time and why the team made confident choices. The ADR list acts as a log, which someone could examine to trace the project's decisions.&lt;/p&gt;
&lt;p&gt;The architecture practice reviews the ADRs and looks for trends and patterns. As certain things come to the fore, the architects write new principles, &lt;a href="xref:patterns"&gt;patterns&lt;/a&gt;, and &lt;a href="xref:nfrs"&gt;NFRs&lt;/a&gt; approved by the ARB to help the teams make future decisions.&lt;/p&gt;
&lt;p&gt;The architect group will propose amendments to the organisation's architecture to the ARB, which may require approval, depending on the size and scope of the new principles.&lt;/p&gt;
&lt;p&gt;Changes in architecture guidance can be applied retrospectively which may result in the creation of new technical debt items. Or we can call an amnesty and accept that something could've been better. Similar to how the law or regulations work.&lt;/p&gt;
&lt;h2 id="in-practice"&gt;In Practice&lt;/h2&gt;
&lt;p&gt;&lt;img src="https://red-sand-078a6ea03.3.azurestaticapps.net/media/architecture-process-sequence-diagram.png" alt="Architecture Process - Sequence"&gt;&lt;/p&gt;
&lt;p&gt;It is up to the development team to decide how to solve problems based on the environment. The environment includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Organisational Strategy&lt;/li&gt;
&lt;li&gt;People &amp;amp; Skills&lt;/li&gt;
&lt;li&gt;Existing technology&lt;/li&gt;
&lt;li&gt;Existing projects&lt;/li&gt;
&lt;li&gt;Corporate Style&lt;/li&gt;
&lt;li&gt;Shared Values&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Paraphrased from &lt;a href="https://www.mckinsey.com/capabilities/strategy-and-corporate-finance/our-insights/enduring-ideas-the-7-s-framework"&gt;McKinsey &amp;amp; Company (2008) Enduring Ideas: the 7-S Framework, www.mckinsey.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Most people try to make good decisions. Usually, bad decisions are the result of poor communication or poor information. The architecture practice must document meaningful decisions and knowledge to help educate people so the teams can make better decisions.&lt;/p&gt;
&lt;p&gt;Using a feedback loop from the teams' decisions and accepting that these won't all be good, we can adjust the team's behaviour through education, exposure, and experience.&lt;/p&gt;
&lt;h3 id="how-not-to-make-decisions"&gt;How not to make decisions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Ignore existing ADRs relating to the subject (Search in the work tracker for ADRs, the tech or similar problems ).&lt;/li&gt;
&lt;li&gt;Do not look at the existing guidance:
&lt;ul&gt;
&lt;li&gt;Principles&lt;/li&gt;
&lt;li&gt;&lt;a href="xref:nfrs"&gt;NFRs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Patterns&lt;/li&gt;
&lt;li&gt;Standards&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Keep the decision secret right up until the last second.&lt;/li&gt;
&lt;li&gt;Do not produce a cost-benefit analysis.&lt;/li&gt;
&lt;li&gt;Write a slide show to confuse matters by overloading everyone with benefits without financial backing or research.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="how-to-make-decisions"&gt;How to make decisions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;In the open and with the people affected by the decision, including:
&lt;ul&gt;
&lt;li&gt;The people who will look after it&lt;/li&gt;
&lt;li&gt;The person who has to spend money on it&lt;/li&gt;
&lt;li&gt;People who will have to make it work&lt;/li&gt;
&lt;li&gt;(If you cannot name them, then it will be you)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;With a proposal around how it will benefit the company.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When in doubt, seek guidance from your team or an architect. We are here to support you if you require any assistance or advice. We believe in working together and helping each other whenever possible.&lt;/p&gt;
&lt;h2 id="anti-patterns-of-architecture"&gt;Anti-patterns of architecture&lt;/h2&gt;
&lt;p&gt;Despite our best efforts, sometimes architects don't get things right. We're sorry, but we're also human, like everyone else. Here's a list of problem archetypes of architects, mainly for fun and giggles.&lt;/p&gt;
&lt;h3 id="ivory-tower"&gt;Ivory Tower&lt;/h3&gt;
&lt;p&gt;Too removed from the business of the organisation. They watch from on high and make proclamations while unaware of the plight of the people on the ground. This type of architect seems to create a lot of work, but it's detached from the reality and culture of the business.&lt;/p&gt;
&lt;h3 id="in-the-trenches"&gt;In the trenches&lt;/h3&gt;
&lt;p&gt;Too focused on their previous role, trench warriors refuse to give up their tactical responsibility and involvement and don't have time or focus for strategy. Sometimes this is because of the current state of the organisation. Sometimes it's because they don't have the exposure to build a picture of a real strategy for the business.&lt;/p&gt;
&lt;h3 id="overly-academic"&gt;Overly Academic&lt;/h3&gt;
&lt;p&gt;Studious and thorough, working through frameworks and quoting luminaries, the academic cannot effectively translate these theories into practical output for the organisation. They talk about possibilities, gold standards, and best practices and sometimes focus on the areas of frameworks which aren't implemented or fully used.&lt;/p&gt;
&lt;p&gt;Knowledge and understanding of frameworks are essential, but frameworks are collections of methods that can help. Using strategies to address issues in the business is good sense. Using techniques to address symptomless 'problems' will make no friends.&lt;/p&gt;
&lt;h3 id="too-technical"&gt;Too technical&lt;/h3&gt;
&lt;p&gt;Often recruited from technical areas, such as IT Operations, the too-technical architect hasn't learned to temper their language to a broader audience. Using too much technical language conversationally can result in getting typecast as another 'techie,' being sidelined from honest discussions and gaining the trust of other parts of the business.&lt;/p&gt;
&lt;p&gt;The technical skills are a real boon, though, and help when working with the more technical aspects of the organisation.&lt;/p&gt;
&lt;h3 id="over-specialized"&gt;Over-specialized&lt;/h3&gt;
&lt;p&gt;An architect should have a wide variety of skills and a broad understanding of most areas of their domain. If the field is too large, then specialism is a natural part of that, but an architect should work across as much of the environment as necessary, learning what they can of each part of the organisation.&lt;/p&gt;
&lt;p&gt;If an architect only understands IT, they won't be able to effectively talk to Finance Partners or Legal about changes, budgets, or compliance. They may struggle to explain hosting concerns if they only know operations and not development.&lt;/p&gt;
&lt;p&gt;Architects often have specialisms, but typically these start to be relinquished after they start becoming architects, moving away from specifics and into broader concepts, so they can better help explain the organisation's mechanics.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;Further Reading&lt;/h2&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
</content>
		<summary>How Architects should work alongside Agile development to enable faster decision-making and reduce risk.</summary>
	</entry>
	<entry>
		<id>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/requirements/nfrs</id>
		<title>Non-functional Requirements</title>
		<author>
			<name>James Brewster</name>
		</author>
		<link href="https://red-sand-078a6ea03.3.azurestaticapps.net/posts/requirements/nfrs" />
		<link rel="enclosure" type="image" href="https://red-sand-078a6ea03.3.azurestaticapps.net/media/header01.png" />
		<updated>2023-06-06T00:00:00Z</updated>
		<content>&lt;p&gt;Functional requirements describe why something is. Non-functional Requirements tell how it is. Where a customer may ask for a specific functional requirement, they are doubtful to ask for an NFR unless something is wrong.&lt;/p&gt;
&lt;p&gt;The NFRs which go into a product can mean all manner of differences, which affect the cost, performance, and reliability of a product or solution.&lt;/p&gt;
&lt;p&gt;Consider the following requirements and how they might affect the cost or development of a vehicle.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Carries two passengers&lt;/li&gt;
&lt;li&gt;Can travel 200 miles&lt;/li&gt;
&lt;li&gt;Travels on roads&lt;/li&gt;
&lt;li&gt;A fuel efficiency greater than 30 miles per gallon.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now, this could describe all manner of things. A motorbike? A tandem bicycle? A Sports car? These could all be right, but they meet the needs of different markets and result in differing products.&lt;/p&gt;
&lt;p&gt;Defining how your product will perform specific tasks and how it will perform under load and in use is essential to create the proper differentiation and guidance for development.&lt;/p&gt;
</content>
		<summary>NFRs define the way a product functions in ways beyond the main requirements of the end customer. They explain how fast, robust or reliable something should be</summary>
	</entry>
	<entry>
		<id>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/solutions/e2e-agile-architecture-story</id>
		<title>Agile Architecture - A short story</title>
		<link href="https://red-sand-078a6ea03.3.azurestaticapps.net/posts/solutions/e2e-agile-architecture-story" />
		<link rel="enclosure" type="image" href="https://red-sand-078a6ea03.3.azurestaticapps.net/media/header01.png" />
		<updated>2023-06-01T00:00:00Z</updated>
		<content>&lt;p&gt;The team worked on a new business application allowing customers to order products online and track their delivery status. The application needed to integrate with several external systems, such as inventory management, payment processing, and shipping providers. The team had to decide how to design the integration layer and what technologies to use.&lt;/p&gt;
&lt;p&gt;They decided to use Azure Logic Apps as the integration platform because it offered a low-code solution to handle complex workflows and orchestration. They also decided to use Azure Service Bus as the messaging system because it provided reliable and scalable communication between the application and the external systems. They documented their decision in an ADR document that followed the template from the current web page context. They explained their decision's context, alternatives, consequences, and status. They submitted the ADR document as a pull request to the repository where they stored all their ADRs.&lt;/p&gt;
&lt;p&gt;The next day, the architect responsible for reviewing the ADRs saw their pull request and opened it. He read their document and was impressed by their reasoning and clarity. He agreed with their decision and approved the pull request. He also noticed that their decision aligned with a new architectural principle he had been thinking about for a while, &amp;quot;Use cloud-native services whenever possible to reduce complexity and increase agility&amp;quot;. He wrote an ADR document proposing this principle as a guideline for future decisions. He followed the same template and explained his proposal's context, decision, alternatives, consequences, and status. He submitted his document as a pull request to the repository where they stored all their architectural principles.&lt;/p&gt;
&lt;p&gt;The following week, the architectural review board met to discuss the new architectural principle. The board comprised five executives from different departments: product management, engineering, operations, security, and finance. They reviewed the document and asked questions of the architect. They debated the pros and cons of adopting cloud-native services versus building or buying custom solutions. They considered the principle's impact on cost, performance, reliability, security, and innovation. After a lively discussion, they reached a consensus and approved the principle. The architect merged the pull request and added the principle to their list of architectural principles.&lt;/p&gt;
&lt;p&gt;The team were happy to see the new architectural principle validated by the architect and the board. They continued to work on their application using Azure Logic Apps and Azure Service Bus. They also looked for other opportunities to apply cloud-native services in their design. They felt more confident and empowered by having clear and consistent architectural guidance.&lt;/p&gt;
</content>
		<summary>How does Agile architecture work in practice? This story provides a demonstration.</summary>
	</entry>
	<entry>
		<id>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/solutions/architecture-decision-records</id>
		<title>Architecture Decision Records</title>
		<link href="https://red-sand-078a6ea03.3.azurestaticapps.net/posts/solutions/architecture-decision-records" />
		<link rel="enclosure" type="image" href="https://red-sand-078a6ea03.3.azurestaticapps.net/media/header01.png" />
		<updated>2023-06-01T00:00:00Z</updated>
		<content>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Architectural decision records (ADRs) capture a crucial technical decision, the context in which it was made, and the consequences of the decision. They are used to record the project’s architectural thinking and conclusions for further reference and to help new team members understand the rationale behind the design choices.&lt;/p&gt;
&lt;p&gt;ADRs typically follow a template that includes the title, context, decision, status, consequences, and alternatives of the decision.&lt;/p&gt;
&lt;p&gt;Use a folder or a wiki page to store ADRs. Somewhere close to the code repository and accessible to other stakeholders. You can create, review and update ADRs using tools like Azure DevOps.&lt;/p&gt;
&lt;h2 id="process"&gt;Process&lt;/h2&gt;
&lt;p&gt;Here is a process for creating Architectural Decision Records (ADRs) in Azure DevOps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Define a template for documenting ADRs that includes the following sections: title, context, decision, status, consequences, and alternatives¹.&lt;/li&gt;
&lt;li&gt;Use a folder in the Azure DevOps repository to store the ADRs. The folder name can be "adr" or "docs/adr" or something similar.&lt;/li&gt;
&lt;li&gt;Create a new work item in the backlog and mark it as technical for each architectural decision. Explain the decision and alternatives in the record and link to relevant resources.&lt;/li&gt;
&lt;li&gt;Assign the item to an engineering team based on their expertise and availability. The team should review the work item and possible solution options (3 is ideal) before deciding how to proceed and recording the decision in Markdown as a file. When writing the document, follow the template and store the output in Azure DevOps.&lt;/li&gt;
&lt;li&gt;Submit the ADR as a pull request and request feedback from the other teams and stakeholders. The pull request should also include any code changes that implement the decision.&lt;/li&gt;
&lt;li&gt;Review the feedback and update the ADR document and code changes accordingly. If there are any conflicts or disagreements, resolve them through discussion and consensus.&lt;/li&gt;
&lt;li&gt;Merge the pull request and mark the feature as done. The ADR document should be 'accepted' or 'rejected' depending on the review's outcome.&lt;/li&gt;
&lt;li&gt;Track the ADRs in a decision log that lists them by title, status, and date. The decision log can be a simple text file or a table on a Wiki page.&lt;/li&gt;
&lt;li&gt;Review the ADRs periodically and update them if necessary. If an ADR becomes obsolete or superseded by another decision, change its status accordingly and link to the new ADR.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This process can help you record your architectural and technical decisions for further reference and have the new team members up to date from day one.&lt;/p&gt;
&lt;p&gt;A centralised Architecture team can review any ADRs made and look to amend any of the architectural artefacts in response. It may be that several decisions cause a change in precedence, which requires adjusting principles or technology guidelines.&lt;/p&gt;
&lt;p&gt;Remember, the aim of an architecture practice is to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Simplify&lt;/li&gt;
&lt;li&gt;De-risk&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Not&lt;/strong&gt; dictate solution&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To that end, the architecture needs to review and adapt to ensure it doesn't become stale.&lt;/p&gt;
&lt;h2 id="providing-short-contextual-decisions"&gt;Providing short, contextual decisions&lt;/h2&gt;
&lt;p&gt;Using a sustainable format is essential to keep decision documentation light and relevant. Here are some examples:&lt;/p&gt;
&lt;h3 id="y-statements"&gt;Y-Statements&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/olzzio/y-statements-10eb07b5a177"&gt;(Wh)Y statements&lt;/a&gt;
(Borrowed from Olaf Zimmerman, an Architect at IBM.)&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4 id="worked-example"&gt;Worked Example&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;In the context&lt;/em&gt; of the ,&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Facing the need to&lt;/em&gt; ,&lt;/p&gt;
&lt;p&gt;&lt;em&gt;We decided for&lt;/em&gt;  pattern.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;And against&lt;/em&gt; .&lt;/p&gt;
&lt;p&gt;&lt;em&gt;To achieve&lt;/em&gt; ,
&lt;em&gt;Accepting that&lt;/em&gt; .&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The format of a Y-Statement creates six phrases in three sections:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;In the Context of... &lt;em&gt;(Name of the solution)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Facing the need to... &lt;em&gt;(Critical challenge)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;We decided for... &lt;em&gt;(The winning solution)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;And against... &lt;em&gt;(The other considered solutions)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;To Acheive... &lt;em&gt;(The main outcome)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Accepting that... &lt;em&gt;(Any Consequences)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Because... (Optional explaination of reasoning)&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;Each outlines a single critical point about the decision. The context and need, the 'winner' and other options considered, the expected outcome and consequences, and optional reasoning if more words are needed.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Loads of examples here: &lt;a href="https://github.com/joelparkerhenderson/architecture-decision-record/tree/main/examples"&gt;architecture-decision-record/examples&lt;/a&gt; Accessed: 31 May 2023.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="architectural-haiku"&gt;Architectural Haiku&lt;/h3&gt;
&lt;p&gt;Another approach is the &lt;a href="https://www.georgefairbanks.com/blog/comparch-wicsa-2011-panel-discussion-and-haiku-tutorial/"&gt;Architectural Haiku&lt;/a&gt;, coined by George Fairbanks in 2011.&lt;/p&gt;
&lt;p&gt;The Architectural Haiku is a single 'slide' of information explaining a critical decision and its rationale and context. Using a 'slide' as the size of the decision artefact limits its length and duration to one page and around 3-4 minutes.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"If I had more time, I would have written a shorter letter" - Blaise Pascal, 1657&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As with any framework or method, follow the idiom 'If in doubt, leave it out'.&lt;/p&gt;
&lt;h2 id="version-control"&gt;Version Control&lt;/h2&gt;
&lt;p&gt;Version Control for your ADRs is essential so you know when they change, who changed them, and who approved them. Using your GIT repo for this is probably the most straightforward idea, as it can do these things effortlessly with the files.&lt;/p&gt;
&lt;h2 id="in-practice"&gt;In Practice&lt;/h2&gt;
&lt;p&gt;Some great ADR tools are around, including ones that use a CLI or DevOps. In this instance, the aim is to use a work item in DevOps linked to a file containing the ADR text, written using Markdown. It can be changed if necessary.&lt;/p&gt;
&lt;p&gt;Write a Y-Statement explaining the decision. The discussion is not essential, but the context and the discarded alternatives are.
For a more significant decision, it may be helpful to produce an Options assessment:&lt;/p&gt;
&lt;p&gt;Svyatoslav Kotusev, 2013, &lt;a href="http://eaonapage.com/Enterprise%20Architecture%20on%20a%20Page%20(v2.0).pdf."&gt;Enterprise Architecture on a Page v2.0&lt;/a&gt;
&lt;img src="https://red-sand-078a6ea03.3.azurestaticapps.net/media/eaonapage.com-options-assessment.png" alt="EA-On-A-Page, options assessment"&gt;&lt;/p&gt;
&lt;p&gt;The list of ADRs is easy to find and query. Anyone can look at the recent ADRs. The architects will regularly review ADRs themselves and look to adapt the architecture as necessary, either creating or updating principles or NFRs to reduce the number of decisions which need to be made and thus recorded.&lt;/p&gt;
&lt;p&gt;So, grab the template below, use the text in a file or work item and record those technical decisions!&lt;/p&gt;
&lt;h2 id="template"&gt;Template&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-Markdown"&gt;&amp;gt; 1. In the context of...
&amp;gt; 2. Facing the need to...
&amp;gt; 3. We decided for...
&amp;gt; 4. And against...
&amp;gt; 5. To acheive...
&amp;gt; 6. Accepting that...
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://medium.com/nerd-for-tech/architecture-decision-records-adr-with-azure-devops-3f0c9edeb85b"&gt;Architecture Decision Records (ADR) With Azure DevOps.&lt;/a&gt; Accessed 31/05/2023.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/joelparkerhenderson/architecture-decision-record"&gt;joelparkerhenderson/architecture-decision-record - GitHub.&lt;/a&gt; Accessed 31/05/2023.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.infoq.com/news/2022/06/aws-adr-guide/"&gt;AWS Publishes Guide to Architecture Decision Records - InfoQ.&lt;/a&gt; Accessed 31/05/2023.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.slideshare.net/mkeeling5000/getting-started-with-architecture-decision-records"&gt;Getting Started with Architecture Decision Records - SlideShare.&lt;/a&gt; Accessed 31/05/2023.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.microsoft.com/en-us/azure/cloud-adoption-framework/decision-guides/"&gt;Architectural decision guides - Cloud Adoption Framework.&lt;/a&gt; Accessed 31/05/2023.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="additional-resources"&gt;Additional Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://adr.github.io/"&gt;ADR GitHub Organisation / GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/nerd-for-tech/architecture-decision-records-adr-with-azure-devops-3f0c9edeb85b"&gt;ADR with DevOps | Medium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/joelparkerhenderson/architecture-decision-record/tree/main/examples"&gt;ADR Examples \ GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/olzzio/y-statements-10eb07b5a177"&gt;Y-Statements - Medium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
		<summary>No one reads extensive documents. ADRs are a way to capture meaningful choices so people can find them in future.</summary>
	</entry>
	<entry>
		<id>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/solutions/the-agile-arb</id>
		<title>The Agile ARB</title>
		<link href="https://red-sand-078a6ea03.3.azurestaticapps.net/posts/solutions/the-agile-arb" />
		<link rel="enclosure" type="image" href="https://red-sand-078a6ea03.3.azurestaticapps.net/media/header01.png" />
		<updated>2023-05-30T00:00:00Z</updated>
		<content>&lt;h2 id="the-agile-arb"&gt;The Agile ARB&lt;/h2&gt;
&lt;p&gt;Sara was the chair of the Architecture Review Board (ARB) at Acme Inc., a software company that had adopted agile methods. She was passionate about creating a culture of trust and collaboration among the different teams and departments. She wanted the ARB to be a facilitator rather than a gatekeeper of decisions.&lt;/p&gt;
&lt;p&gt;Sara had invited representatives from various business units, product owners, developers, testers, and architects to join the ARB, ensuring they had a clear charter and vision. The ARB met monthly to review and approve significant architectural changes that affected the whole organisation, such as introducing new technologies, standards, or patterns. They also created and maintained principles and guidelines that helped teams make sensible local decisions without waiting for the ARB’s approval.&lt;/p&gt;
&lt;p&gt;One of the principles was to favour simplicity and pragmatism over complexity and perfectionism. Another was to encourage experimentation and learning from failures. A third was to seek feedback and alignment from stakeholders and customers early and often. The ARB also provided templates and tools for teams to document and communicate their architectural decisions, such as Architecture Decision Records (ADRs) and diagrams.&lt;/p&gt;
&lt;p&gt;Sara was proud of how the ARB had evolved from being a bottleneck to a catalyst. She saw how teams were more empowered and autonomous, how they delivered value faster and more reliably, and how they improved their quality and performance. She also saw how the ARB members learned from each other and shared their best practices across the organisation.&lt;/p&gt;
&lt;p&gt;She smiled as she opened her email and saw a message from one of the teams. They had successfully implemented a microservice architecture for their product, using a cloud-native platform that the ARB had approved a few months ago. They thanked the ARB for their support and guidance and shared metrics and feedback showing how their product improved scalability, availability, and user satisfaction.&lt;/p&gt;
&lt;p&gt;Sara congratulated them and asked them if they would like to present their experience at the next ARB meeting. She thought showcasing their work and inspiring others would be an excellent opportunity. She also asked them if they had any suggestions or feedback for the ARB on improving their processes or policies.&lt;/p&gt;
&lt;p&gt;She closed her email and looked at her calendar. She saw that the next ARB meeting was in two weeks. She wondered what new challenges and opportunities would come up then. She felt excited and curious. She loved her job.&lt;/p&gt;
</content>
		<summary>A short story about the way an Agile ARB could run</summary>
	</entry>
	<entry>
		<id>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/solutions/architecture-review-board</id>
		<title>Architecture Review Board</title>
		<link href="https://red-sand-078a6ea03.3.azurestaticapps.net/posts/solutions/architecture-review-board" />
		<link rel="enclosure" type="image" href="https://red-sand-078a6ea03.3.azurestaticapps.net/media/header01.png" />
		<updated>2023-05-30T00:00:00Z</updated>
		<content>&lt;h2 id="synopsis"&gt;Synopsis&lt;/h2&gt;
&lt;p&gt;A frequent perception of ARBs from Agile teams is poor and that they delay decisions and delivery. Properly implemented, an ARB allows an organisation to be more open and transparent and can empower local decision-making within a team or POD.&lt;/p&gt;
&lt;h2 id="introducing-the-arb"&gt;Introducing the ARB&lt;/h2&gt;
&lt;blockquote&gt;
&lt;h3 id="the-agile-arb"&gt;The Agile ARB&lt;/h3&gt;
&lt;p&gt;I asked ChatGPT to write a story about an &lt;a href="xref:the-agile-arb"&gt;Agile ARB&lt;/a&gt; and its pretty good!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;An Architecture Review Board (ARB) is a representative group of people across the organisation who take a central role in governing architectural decisions which affect the business significantly.&lt;/p&gt;
&lt;p&gt;The ARB aims to mitigate risks to the business and improve strategic planning and awareness, especially around the use of technology and any changes to that. It does this by making it easier for front-line teams to make decisions and simplifying the overall organisation over time to keep cost and complexity at bay. An ARB does not dictate solutions. It provides a constrained space to support fast decision-making.&lt;/p&gt;
&lt;p&gt;It is not a Technology Review Board (TRB) and doesn't govern what technology is allowed. It regulates the processes for selecting new technologies, methods, and principles.&lt;/p&gt;
&lt;p&gt;Nothing an ARB does should be urgent. An ARB may need to determine a new principle/policy in response to an emerging issue, but such instances should be rare. The ARB should not be too slow or be unable to react quickly, but most things it needs to deal with should be at a level where the business can take some time to think about them.&lt;/p&gt;
&lt;p&gt;Lastly, an ARB will meet and align following annual updates, strategic updates, or quarterly reviews. In a product-led organisation, an ARB will outline a strategic runway to ensure technology requirements (enablers) and deliverables are considered and planned following product development needs.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3 id="centralised-vs-decentralised-decisions"&gt;Centralised vs Decentralised Decisions&lt;/h3&gt;
&lt;p&gt;A successful ARB wants to encourage decentralised decisions as much as possible. That would be, they need to provide guidance, examples and principles that ensure people on the ground can make good decisions whilst they plan and develop processes, product features and changes.&lt;/p&gt;
&lt;p&gt;The ARB creates a kind of organisational common sense that reinforces the right way to do things, in-line with company culture and values.&lt;/p&gt;
&lt;p&gt;As we all know, &lt;a href="https://www.thealternativeboard.com/blog/culture-eats-strategy"&gt;Culture eats Strategy for Breakfast&lt;/a&gt;, right?&lt;/p&gt;
&lt;p&gt;An unsuccessful ARB controls every decision, which results in an unacceptable level of delay as the ARB becomes overwhelmed with small and largely inconsiquential decisions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="purpose"&gt;Purpose&lt;/h2&gt;
&lt;p&gt;An ARB is for reviewing and governing architecture. In this context, the ARB will make strategic decisions about how to use technology in the business rather than the specifics of what technologies to use.&lt;/p&gt;
&lt;h2 id="membership"&gt;Membership&lt;/h2&gt;
&lt;p&gt;An ARB is a handful of relevant, cross-organizational people. Too mono-culture, and it won't be taken seriously(i.e., too many architects or technologists). Too big, and it won't make any decisions. As a cross-organizational group, it must have a diverse representation from different business areas.&lt;/p&gt;
&lt;p&gt;It is not somewhere for architects to meet and talk. All the architects, managers, and technologists should not expect to be involved. They might watch or present in exceptional circumstances or gain exposure by acting as a proxy.&lt;/p&gt;
&lt;p&gt;That said, it has to be transparent. Publish all the ARB meetings, minutes, and outcomes to the broadest possible audience. Anyone should be able to raise an issue or request a change to the ARB.&lt;/p&gt;
&lt;h2 id="format"&gt;Format&lt;/h2&gt;
&lt;p&gt;Its first action should be to review its charter and accept it.&lt;/p&gt;
&lt;p&gt;Membership can be flexible, but this should be responsive to events or requirements, not just having a chaotic membership that constantly changes.&lt;/p&gt;
&lt;p&gt;Initially, it could be weekly or fortnightly, as there may be a lot of reviews and artefacts to create, in demand to business needs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Principles&lt;/li&gt;
&lt;li&gt;Patterns&lt;/li&gt;
&lt;li&gt;Strategic Non-functional Requirements&lt;/li&gt;
&lt;li&gt;Major Developments or Solutions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ARB reviews should only relate to strategic solutions and projects. Most items should be small enough to avoid the ARB, and the ARB should encourage local decision-making over trying to centralise decisions. Centralised decisions should be infrequent and far-reaching.&lt;/p&gt;
&lt;p&gt;The board meeting should follow a standard approach for such a meeting to ensure people are comfortable and familiar with it. Frameworks such as COBIT can provide some guidance. Here is a suggestion for an initial format:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The ARB Meets Monthly and in response to nominated events (PI Planning, annual review, etc.)&lt;/li&gt;
&lt;li&gt;There is a Chairperson who will run and take the lead on ensuring the meeting runs as expected. Ideally, this is the sponsor, but it could be delegated or rotated.&lt;/li&gt;
&lt;li&gt;There is a nominated secretary who takes minutes and actions. Rotate the role, or bring someone in who needs more exposure to the ARB and strategic decision-making.&lt;/li&gt;
&lt;li&gt;Start by reviewing previous minutes and actions.&lt;/li&gt;
&lt;li&gt;Review any proposals or actions. Any issues should have been relayed with enough notice so that members could review what they have to before the meeting and come up with questions or requests.&lt;/li&gt;
&lt;li&gt;Most decisions should be able to be approved within the meeting. Deferring too many approvals is terrible.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The ARB doesn't make the decisions. It provides a framework to review and guide them proactively through principles and guidance. Suppose a decision is not being made because there is inadequate direction. In that case, an ARB member should consult with another member and include advice to cover a similar future situation.&lt;/p&gt;
&lt;h2 id="frequency"&gt;Frequency&lt;/h2&gt;
&lt;p&gt;Once established, a Monthly or Quarterly format should be sufficient to maintain a manageable level of governance.&lt;/p&gt;
&lt;p&gt;ARB Meetings ideally align with any other ceremonies, such as Quarterly Planning or strategic planning, letting the ARB determine whether any specific architectural work is needed, over and above the expected level of involvement, based on upcoming work or projects.&lt;/p&gt;
&lt;h2 id="outcomes"&gt;Outcomes&lt;/h2&gt;
&lt;p&gt;An ARB should create the following outcomes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Requirements for new policies and principles&lt;/li&gt;
&lt;li&gt;Requirements for Strategic Enablers and Capabilities&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Typically, work from the ARB would go to the Architecture team to define, complete, or at least manage. Acceptance criteria should be a part of any of these to ensure excessive approval of the outcome is unnecessary.&lt;/p&gt;
&lt;h2 id="anti-patterns"&gt;Anti-patterns&lt;/h2&gt;
&lt;p&gt;Here's a selection of ways this can go wrong or things you can do poorly:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Excessive Approvals - If you find every ARB is 'full' of things to approve, then your Policies and Principles are likely irrelevant or too granular.&lt;/li&gt;
&lt;li&gt;Deferred decisions - If the board makes a lot of deferrals, it would usually be because the information or risks are unclear, and they don't feel safe taking them.&lt;/li&gt;
&lt;li&gt;Poor reputation - The ARB may be something people dread. In this case, it's likely that the process is excessively onerous, too frequent, or that the principles are poorly accepted.&lt;/li&gt;
&lt;li&gt;Technology Focussed - The ARB shouldn't discuss the choice of technology. It should guide the principles and processes that result in those changes. In this case, the ARB may be too tactical, resulting in low traction across the business.&lt;/li&gt;
&lt;/ol&gt;
</content>
		<summary>A coherent ARB can help organisations plan and normalise technology decisions. It can also create a situation where nothing happens, and work goes to die.</summary>
	</entry>
	<entry>
		<id>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/patterns/2023-05-26-identity-auth</id>
		<title>Identity, Authentication and Authorisation</title>
		<link href="https://red-sand-078a6ea03.3.azurestaticapps.net/posts/patterns/2023-05-26-identity-auth" />
		<link rel="enclosure" type="image" href="https://red-sand-078a6ea03.3.azurestaticapps.net/media/header01.png" />
		<updated>2023-05-16T00:00:00Z</updated>
		<content>&lt;h2 id="pattern-overview"&gt;Pattern Overview&lt;/h2&gt;
&lt;p&gt;This pattern describes a central authentication model suitable for a microservices web application. It builds on several other designs to provide a scalable way to identify, authenticate and authorise access to resources, data and services.&lt;/p&gt;
&lt;p&gt;This example uses a role-based authorisation model. A policy-based authorisation model would be more flexible but also more complex.&lt;/p&gt;
&lt;h3 id="illustration"&gt;Illustration&lt;/h3&gt;
&lt;p&gt;&lt;img src="https://learn.microsoft.com/en-us/dotnet/architecture/microservices/secure-net-microservices-web-applications/media/index/api-gateway-centralized-authentication.png" alt="API Gateway Centralized authentication" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://learn.microsoft.com/en-us/dotnet/architecture/microservices/secure-net-microservices-web-applications/"&gt;Rousos (2023) Securing .NET Microservices and Web Applications, learn.microsoft.com.&lt;/a&gt;(Accessed: 16 May 2023).‌&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This example is for a mobile app. A similar method would work for a static site, calling an API, a Single Page Application, or an MVC application. Use the &lt;a href="https://akfpartners.com/growth-blog/backend-for-frontend#:%7E:text=In%20the%20Backend%20for%20Frontend%20pattern%2C%20a%20service,differ%20from%20a%20traditional%20API%20or%20monolithic%20gateway."&gt;Backends-For-Frontends&lt;/a&gt; pattern to offset any differences.&lt;/p&gt;
&lt;h2 id="benefits-of-this-pattern"&gt;Benefits of this pattern&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;By using the gateway, authentication is offloaded to the gateway and centralised, see &lt;a href="xref:gateways"&gt;Gateways&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The gateway issues a signed token containing the authorised user's roles, which can be used for the token's lifespan, reducing chatter, see &lt;a href="xref:microservices-anti-patterns"&gt;Microservices Anti-patterns&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The token is long-lived, reducing user frustration. See &lt;a href="xref:ease-of-use"&gt;Ease-of-Use&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Once implemented, downstream services have their role added to the token and respect it.&lt;/li&gt;
&lt;li&gt;Identity management and storage can be offloaded to the customer's preferred vendor using open standards, Including:
&lt;ul&gt;
&lt;li&gt;Microsoft, Google or Facebook identities, such as Microsoft AzureAD B2C&lt;/li&gt;
&lt;li&gt;Microsoft Azure AD identities, using B2B Federation&lt;/li&gt;
&lt;li&gt;Any OpenID Connect or OAuth2.0 Identities.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="drawbacks-to-this-pattern"&gt;Drawbacks to this pattern&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;It assumes simple role-based authorisation. A more complex policy-based model would require additional depth and complexity in the token, increasing its size and complexity.&lt;/li&gt;
&lt;li&gt;The token is easy to hack, so don't use it outside the network. A separate reference token model is recommended, where the token is used within the cluster and used by the gateway as a delegated authorisation.
&lt;ul&gt;
&lt;li&gt;The user would have a lean token or reference cookie, which only correlates to the token on the gateway. Think of this model as a delegation rather than an authorisation.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;This pattern creates a dependency on external identity vendors, which can be hard to manage.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="when-to-use-this-pattern"&gt;When to use this pattern&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;In most enterprise or B2B microservice models, this pattern will be beneficial. It is ideal for a containerised application, which needs to minimise cross-talk and have a planned model for authorisation and identity.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="when-to-avoid-this-pattern"&gt;When to avoid this pattern&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;This pattern is not suitable for use on unsecured networks. A malicious actor can use the token's contents to understand the user and their roles.
&lt;ul&gt;
&lt;li&gt;This pattern still promotes zero-trust, as every service will validate the token and must trust the issuer and check for tampering.&lt;/li&gt;
&lt;li&gt;You can work around this limitation by using a reference token issued to the external user at the gateway, which does NOT contain identifiable information.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nordicapis.com/how-to-control-user-identity-within-microservices/"&gt;NordicAPIs - How to control user identity within microservices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/&amp;#64;maison.moa/using-jwt-json-web-tokens-to-authorize-users-and-protect-api-routes-3e04a1453c3e"&gt;Using JWT to authorize users and protect API routes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.microsoft.com/en-us/dotnet/architecture/microservices/secure-net-microservices-web-applications/"&gt;Make secure .NET Microservices and Web Applications&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
		<summary>Authenticating users in microservices can be fraught with perils.</summary>
	</entry>
	<entry>
		<id>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/principles/intellectual-property</id>
		<title>Intellectual Property</title>
		<link href="https://red-sand-078a6ea03.3.azurestaticapps.net/posts/principles/intellectual-property" />
		<link rel="enclosure" type="image" href="https://red-sand-078a6ea03.3.azurestaticapps.net/media/header01.png" />
		<updated>2023-05-15T00:00:00Z</updated>
		<content>&lt;blockquote&gt;
&lt;p&gt;&amp;quot;An ounce of prevention is worth a pound of cure. - Benjamin Franklin&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="statement"&gt;Statement&lt;/h2&gt;
&lt;p&gt;The business should retain control of its intellectual property and ensure that it is not used without permission.&lt;/p&gt;
&lt;h2 id="rationale"&gt;Rationale&lt;/h2&gt;
&lt;p&gt;Intellectual property is a valuable asset for the business. It is important to protect and manage the intellectual property of the business.&lt;/p&gt;
&lt;h2 id="implications"&gt;Implications&lt;/h2&gt;
&lt;p&gt;The business should ensure that its intellectual property is protected from infringement by others. Intellectual property should be managed in a way that maximizes its value to the business while minimizing the risk of infringement.&lt;/p&gt;
&lt;h3 id="details-and-context"&gt;Details and Context&lt;/h3&gt;
&lt;p&gt;Intellectual property is important because it is a valuable asset for the business. It can include patents, trademarks, copyrights, trade secrets, and other proprietary information.&lt;/p&gt;
&lt;p&gt;Protecting intellectual property can help the business maintain its competitive advantage and prevent others from using its ideas or products without permission. It can also help the business generate revenue through licensing agreements or other means.&lt;/p&gt;
&lt;p&gt;Managing intellectual property can be complex and requires careful planning and execution. The business should have policies and procedures in place to protect its intellectual property and ensure that it is not used without permission. This can include measures such as confidentiality agreements, non-disclosure agreements, and other legal protections.&lt;/p&gt;
&lt;p&gt;There are several legal protections for intellectual property. Some of the most common include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Patents: A patent is a legal protection for an invention or process. It gives the inventor the exclusive right to make, use, and sell the invention for a certain period.&lt;/li&gt;
&lt;li&gt;Trademarks: A trademark is a symbol, word, or phrase that identifies and distinguishes a product or service from those of others. It can be registered with the government to provide legal protection.&lt;/li&gt;
&lt;li&gt;Copyrights: A copyright is a legal protection for original works of authorship such as books, music, and software. It gives the creator the exclusive right to reproduce and distribute the work.&lt;/li&gt;
&lt;li&gt;Trade secrets: A trade secret is a confidential piece of information that provides a competitive advantage to a business. It can include things like formulas, processes, and customer lists.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are other legal protections available as well, depending on the type of intellectual property involved. It’s important to consult with an attorney who specializes in intellectual property law to determine the best course of action for your business.&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.gov.uk/guidance/patents"&gt;Patents - gov.uk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.gov.uk/register-a-trademark"&gt;Trademarks - gov.uk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.gov.uk/copyright"&gt;Copyright - gov.uk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.gov.uk/guidance/protect-your-trade-secrets"&gt;Trade Secrets - gov.uk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
		<summary>This page explains the importance of protecting intellectual property and provides examples of legal protections for intellectual property.</summary>
	</entry>
	<entry>
		<id>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/patterns/2023-05-15-dumb-pipes</id>
		<title>Dumb Pipes</title>
		<link href="https://red-sand-078a6ea03.3.azurestaticapps.net/posts/patterns/2023-05-15-dumb-pipes" />
		<link rel="enclosure" type="image" href="https://red-sand-078a6ea03.3.azurestaticapps.net/media/header01.png" />
		<updated>2023-05-15T00:00:00Z</updated>
		<content>&lt;p&gt;As services scale in a microservices architecture, they need to communicate. A communication network is essential to ensure each service can easily talk to the others. Still, as they scale, you must ensure they can grow and continue communicating.&lt;/p&gt;
&lt;p&gt;This pattern uses the principle of 'Smart end-points, dumb pipes'. If the pipes are clever, they need maintenance; everyone has to wait on the team which is responsible for the pipe, which reduces time to market.&lt;/p&gt;
&lt;p&gt;If the pipe is dumb, anyone can send a message quickly; anyone can consume a message easily. They may need to adjust the format, but they can do that within the team.&lt;/p&gt;
&lt;p&gt;A truly stupid pipe should handle routing, and that's it.&lt;/p&gt;
&lt;h2 id="illustration"&gt;Illustration&lt;/h2&gt;
&lt;p&gt;&lt;img src="https://learn.microsoft.com/en-us/dotnet/architecture/microservices/architect-microservice-container-applications/media/communication-in-microservice-architecture/sync-vs-async-patterns-across-microservices.png" alt="A diagram showing communications in a Microservices architecture" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Anti-patterns and patterns in communication between microservices &lt;a href="https://learn.microsoft.com/en-us/dotnet/architecture/microservices/architect-microservice-container-applications/communication-in-microservice-architecture"&gt;from learn.microsoft.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="rationale"&gt;Rationale&lt;/h2&gt;
&lt;p&gt;Summarising all of the above, the benefits of smart endpoints and dumb pipes are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lower cost of messaging infrastructure - pushes the cost of goods sold closer to the producer and consumer. Allows messaging infrastructure to scale by the number of messages instead of the computational complexity of messages. Less complexity means fewer nodes, which means fewer licenses!&lt;/li&gt;
&lt;li&gt;Organization Scalability – teams aren’t reliant on transforms created by a centralised team.&lt;/li&gt;
&lt;li&gt;Low Latency – because computation is limited, messages are delivered more quickly and predictably to end consumers.&lt;/li&gt;
&lt;li&gt;Capacity and scalability of messaging infrastructure – increased as compute is not part of the platform's scale.&lt;/li&gt;
&lt;li&gt;Availability of messaging infrastructure – reduced compute means reduced chance of failure.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="assumptions"&gt;Assumptions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Messages must be in a defined format which anyone can reference and understand. An API with a contract is an excellent way to do this.&lt;/li&gt;
&lt;li&gt;Teams will need to adhere to contracts.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://martinfowler.com/articles/microservices.html."&gt;Lewis, J. and Fowler, M. (2014) Microservices, martinfowler.com.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://akfpartners.com/growth-blog/architecture-principle-messaging-systems-smart-end-points-dumb-pipes"&gt;Architecture Principles: Messaging Systems – Smart End Points, Dumb Pipes | AKF Partners&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nathanpeck.com/microservice-principles-smart-endpoint-dumb-pipe/"&gt;Smart Endpoints and Dumb Pipes, Nathan Peck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.microsoft.com/en-us/dotnet/architecture/microservices/architect-microservice-container-applications/communication-in-microservice-architecture"&gt;Nishanil et al. (2022) Communication in a microservice architecture, learn.microsoft.com.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
		<summary>This page is about designing and implementing effective communication between microservices in a distributed system.</summary>
	</entry>
	<entry>
		<id>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/principles/security-principles</id>
		<title>Security Principles</title>
		<link href="https://red-sand-078a6ea03.3.azurestaticapps.net/posts/principles/security-principles" />
		<link rel="enclosure" type="image" href="https://red-sand-078a6ea03.3.azurestaticapps.net/media/header01.png" />
		<updated>2023-05-11T15:11:41Z</updated>
		<content>&lt;h2 id="statement"&gt;Statement&lt;/h2&gt;
&lt;p&gt;As a business, we want to adopt a Zero-trust approach to our business and use of technology. This model provides the best combination of security and agility for our enterprise.&lt;/p&gt;
&lt;h2 id="rationale"&gt;Rationale&lt;/h2&gt;
&lt;p&gt;Zero Trust is a mature target model in 2023. It supports the capabilities and organisation needs in the current climate and, properly implemented, it is proven to improve user experience and security posture.&lt;/p&gt;
&lt;p&gt;By commoditising the network, and assuming no device or user is anywhere safe, organisations can improve access to services AND improve security. In some cases, this can happen whilst overall costs come down, through a reduced vendor footprint and reduced local hosting, traffic and operations.&lt;/p&gt;
&lt;h2 id="approach"&gt;Approach&lt;/h2&gt;
&lt;p&gt;Zero Trust is a security approach built on three principles:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Verify Explicitly&lt;/li&gt;
&lt;li&gt;Use 'least privilege' access&lt;/li&gt;
&lt;li&gt;Assume Breach&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let's explore these three points.&lt;/p&gt;
&lt;h3 id="verify-explicitly"&gt;Verify Explicitly&lt;/h3&gt;
&lt;p&gt;Make use of the tools and data points available to validate that access is being granted to the right person or service, and that they are who they say they are. This should take into account things like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Geographic location.&lt;/li&gt;
&lt;li&gt;Device type, health and validity.&lt;/li&gt;
&lt;li&gt;Data Classification and Permissions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="use-least-privilege-access"&gt;Use 'Least Privilege' access&lt;/h3&gt;
&lt;p&gt;Make sure that people and services only have relevant access to their roles; no more or less. For escalated privileges, use concepts like Just-In-Time access to make sure that elevated logons are being approved, logged and cleared. This can also encompass:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Risk-based policies, that adapt the authentication to the level of risk.&lt;/li&gt;
&lt;li&gt;A 'Four eyes' principle, to make sure access to elevated roles is approved by a second person, reducing the risk of lone insider threat.&lt;/li&gt;
&lt;li&gt;Classify Data and Services according to value and risk and protect them appropriately.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="assume-breach"&gt;Assume Breach&lt;/h3&gt;
&lt;p&gt;Log and monitor access to services and data. Minimise the impact of any breach, by controlling shared resources and accounts. Try to avoid unnecessary dependencies or permissions. This can be done through:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Adding appropriate monitoring and logging to applications.&lt;/li&gt;
&lt;li&gt;Using single sign-on to ease tracking and logging.&lt;/li&gt;
&lt;li&gt;Using the Bulkhead pattern, to minimise the danger between services and threads.&lt;/li&gt;
&lt;li&gt;Actively monitor and control inputs, to help minimise breaches. Control access points and validate data entry.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="objective"&gt;Objective&lt;/h2&gt;
&lt;p&gt;Remove implicit trust throughout the environment and instead use processes, policies, and technologies to continuously authenticate and authorize entities as trustworthy before actually granting access&lt;/p&gt;
&lt;h2 id="implications"&gt;Implications&lt;/h2&gt;
&lt;p&gt;Adopting a zero-trust security model can benefit us by providing:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Better visibility into traffic and access patterns, which can result in better-developed and targeted systems.&lt;/li&gt;
&lt;li&gt;An enhanced user experience, typically with faster login times and lower password or account fatigue.&lt;/li&gt;
&lt;li&gt;A reduction in data breaches and an improvement in compliance.&lt;/li&gt;
&lt;li&gt;Reduction in the complexity of infrastructure and an improvement in security posture.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Improperly integrated or configured, this approach could result in:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Increased complexity and cost, often through having duplicate capabilities or the sprawl of security services and appliances.&lt;/li&gt;
&lt;li&gt;A lack of planning can result in expensive installations and purchases.&lt;/li&gt;
&lt;li&gt;Without a coherent policy around user access, friction can be increased as users fight with additional factors and complex passwords.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
</content>
		<summary>&lt;p&gt;As a business, we want to adopt a Zero-trust approach to our business and use of technology. This model provides the best combination of security and agility for our enterprise.&lt;/p&gt;</summary>
	</entry>
</feed>