<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<id>https://red-sand-078a6ea03.3.azurestaticapps.net/</id>
	<title />
	<link rel="self" href="https://red-sand-078a6ea03.3.azurestaticapps.net/" />
	<rights>Copyright James Brewster© 2023</rights>
	<updated>2023-05-09T06:53:49Z</updated>
	<logo>https://red-sand-078a6ea03.3.azurestaticapps.net/media/images/header01.png</logo>
	<entry>
		<id>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/patterns-and-antipatterns/microservices</id>
		<title>Microservices</title>
		<link href="https://red-sand-078a6ea03.3.azurestaticapps.net/posts/patterns-and-antipatterns/microservices" />
		<link rel="enclosure" type="image" href="https://red-sand-078a6ea03.3.azurestaticapps.net/media/images/header01.png" />
		<updated>2023-05-09T06:52:10Z</updated>
		<content>&lt;p&gt;Microservices are a way to build applications and are used by some of the biggest sites and systems online, such as Netflix and Amazon. They let systems be updated safely and scale well. But they are complex and require firm principles in place to work properly.&lt;/p&gt;
&lt;h2 id="pattern-overview"&gt;Pattern Overview&lt;/h2&gt;
&lt;p&gt;Microservices architecture is an architectural style that structures an application as a collection of services that are independently deployable, loosely coupled, organized around business capabilities and owned by a small team. In simple terms, microservices are a specific method of designing software systems to structure a single application as a collection of loosely coupled services.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://red-sand-078a6ea03.3.azurestaticapps.net/media/images/microservices-patterns.png" alt="microservices-pattern"&gt;
&lt;em&gt;Model of a Monolith to Microservices migration, showing sub-patterns&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This is a reference pattern, with several optional sub-patterns.&lt;/p&gt;
&lt;h2 id="benefits-of-this-pattern"&gt;Benefits of this pattern&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Scale and resilience in each service.&lt;/li&gt;
&lt;li&gt;Safe deployment of updates to individual services.&lt;/li&gt;
&lt;li&gt;Separation of services, allowing changes to be made locally and quickly, with
minimal impact on other services.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="drawbacks-to-this-pattern"&gt;Drawbacks to this pattern&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;It can be complex, quickly.&lt;/li&gt;
&lt;li&gt;Overwhelming for a small number of teams, due to a large number of
components.&lt;/li&gt;
&lt;li&gt;The Danger of component sprawl if services are over-specialized.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="when-to-use-this-pattern"&gt;When to use this pattern&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;This pattern is for applications that need to grow, which need to manage
their costs and support a large degree of change and experimentation.&lt;/li&gt;
&lt;li&gt;When reliability is critical to business, reputation or safety.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="when-to-avoid-this-pattern"&gt;When to avoid this pattern&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Because you want to be down with the kids, and you think it's cool.&lt;/li&gt;
&lt;li&gt;Because you want to use the 'best' type of technology and work at Google.&lt;/li&gt;
&lt;li&gt;For a simple application, which doesn't have a high probability of needing
change, addition or integration.&lt;/li&gt;
&lt;li&gt;For an application that won't be making lots of changes, with lots of
active users.&lt;/li&gt;
&lt;li&gt;For your Blog.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="approach"&gt;Approach&lt;/h2&gt;
&lt;p&gt;Typically, microservices architectures require a good understanding of the business domain model, before development can begin. This ensures that services align with specific functions, which can be built in line with the business. &lt;a href="https://en.wikipedia.org/wiki/Conway%27s_law"&gt;Conways Law&lt;/a&gt; states that any organisation which designs a system will design one that looks like the organisation. This needs to be considered as if your microservices don't align with your business model, it will be very difficult to succeed.&lt;/p&gt;
&lt;h2 id="assumptions"&gt;Assumptions&lt;/h2&gt;
&lt;p&gt;In choosing this pattern, you ruled out simpler options as not being capable.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You have time and space for teams to find their way; this is hard and it
will go wrong.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://learn.microsoft.com/en-us/azure/architecture/microservices/"&gt;Microsoft - Microservices design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://akfpartners.com/growth-blog/microservice-architecture-principles"&gt;AKF Partners - Microservices Architecture Principles&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="anti-patterns-of-the-microservices-architecture"&gt;Anti-Patterns of the microservices architecture&lt;/h2&gt;
&lt;p&gt;A selection of common mistakes and bloopers found in the wild.&lt;/p&gt;
&lt;h3 id="calls-in-series"&gt;Calls in Series&lt;/h3&gt;
&lt;p&gt;Many microservices architecture failures are the result of not properly understanding the way failure works in distributed systems. To calculate the SLA of multiple systems, you must multiply the availability of each dependent service together.&lt;/p&gt;
&lt;p&gt;If a system is built to have an availability of 99.5%, but it relies upon another service, with the same SLA of 99.5%, then the total SLA of that system is 99.0025%. If a third dependency is introduced with the same SLA of 99.5%, then we are down to 98.5%. This quickly adds up and gets exponentially worse.&lt;/p&gt;
&lt;p&gt;It's important to use asynchronous calls to prevent this, rather than calls in series. Incorporate a message bus or an event framework, and instead of waiting, your services can remain resilient.&lt;/p&gt;
&lt;p&gt;Reference: &lt;a href="https://akfpartners.com/growth-blog/microservice-anti-pattern-calls-in-series-the-xmas-tree-light-anti-pattern"&gt;AKF Partners: Microservices Anti-Patterns, 2019&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="distributed-monolith"&gt;Distributed Monolith&lt;/h3&gt;
&lt;p&gt;When you split a monolith, don't let your services become dependent on each
or several other microservices. If changes in services require redeployment or
change in other services, you've built a distributed monolith.
Lastly, over-dependency can also manifest in long deployment times, as too many
changes have to occur at once. Sometimes it shows that deployment has to
happen in a particular order.&lt;/p&gt;
&lt;p&gt;This is a &lt;a href="http://www.laputan.org/mud/mud.html#BigBallOfMud"&gt;Big-Ball-Of-Mud&lt;/a&gt; that also has network-level latencies to
deal with now.&lt;/p&gt;
&lt;h3 id="overly-chatty"&gt;Overly Chatty&lt;/h3&gt;
&lt;p&gt;The amount of communication between services must be considered. Services are distributed, so calls between them take time. Overly chatty services are not performant; the latency can kill the performance. Following &lt;a href="https://en.wikipedia.org/wiki/SOLID"&gt;SOLID&lt;/a&gt; principles can help here.&lt;/p&gt;
&lt;h3 id="shared-persistence"&gt;Shared Persistence&lt;/h3&gt;
&lt;p&gt;A monolith typically requires a large shared data store. As organisations redesign to microservices, thoughts around persistence may be overlooked, and traditional patterns followed. When you tie a service and a database together, you affect reliability. There is a recommendation to adopt a 0-1 database per service model.&lt;/p&gt;
&lt;p&gt;For many types of computing, such as Azure Functions, or AWS Lambda, databases may be unnecessary. If compute uses documents instead or responds to events or messages, then all the persistence could be encapsulated.&lt;/p&gt;
&lt;p&gt;in these cases, avoiding any real persistence helps to improve reliability, by removing unnecessary dependencies.&lt;/p&gt;
&lt;p&gt;Reference: &lt;a href="https://akfpartners.com/growth-blog/microservice-Architecture-principle-one-or-zero-databases-per-service"&gt;AKF Partners, Microservices Architecture Principle: One or Zero Databases per Service. 2022&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="entangled-data"&gt;Entangled Data&lt;/h3&gt;
&lt;p&gt;When all the services in your application can use database connections to get whatever they need, it becomes harder to unpick and separate them as services scale. The database starts to become a bottleneck, changes slow down as people need to extend things.. the natural next step is to separate the services into individual databases. Except, you have no idea what you need to separate. Congratulations, you have entangled data.&lt;/p&gt;
&lt;p&gt;To ensure you can scale as you need to, the data needs to be segregated into clear domains, which are readily identifiable and easy to access.&lt;/p&gt;
&lt;p&gt;A successful remedy to this problem can be to restrict inter-domain communication to API calls. By ensuring cross-service database calls are eliminated and contracted, defined borders are put in place, segregation is much easier to manage.&lt;/p&gt;
&lt;p&gt;This anti-pattern was seen as such a threat to the growth and agility of Amazon, that Jeff Bezos &lt;a href="https://nordicapis.com/the-bezos-api-mandate-amazons-manifesto-for-externalization/"&gt;threatened to fire anyone who followed it&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Reference: &lt;a href="https://www.techtarget.com/searchapparchitecture/tip/4-deadly-microservices-antipatterns-that-ruin-migration#:%7E:text=In%20an%20entangled%20data%20antipattern%2C%20all%20the%20services,modules%20and%20make%20structural%20changes%20to%20your%20architecture."&gt;TechTarget.com, 4 microservices antipatterns that ruin migration. 2020&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="improper-versioning"&gt;Improper Versioning&lt;/h3&gt;
&lt;p&gt;TODO: Build API versions into your URI calls.&lt;/p&gt;
&lt;h2 id="sub-patterns"&gt;Sub-patterns&lt;/h2&gt;
&lt;p&gt;TODO: A successful migration of monolith to microservices will likely use many
different patterns. Some common ones are linked here.&lt;/p&gt;
&lt;h3 id="ambassador"&gt;Ambassador&lt;/h3&gt;
&lt;p&gt;TODO: An Ambassador sits between two services and negotiates. Typically a proxy
service can interpret. An ambassador is often used to offload or mask client
interoperability issues. An ambassador is a specialized sidecar.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://learn.microsoft.com/en-us/azure/architecture/patterns/ambassador"&gt;Ambassador Pattern&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="anti-corruption"&gt;Anti-corruption&lt;/h3&gt;
&lt;p&gt;TODO: When two systems don't properly understand each other, an Anti-corruption
layer can be introduced to protect the new architecture.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://learn.microsoft.com/en-us/azure/architecture/patterns/anti-corruption-layer"&gt;Anti-corruption Layer pattern&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="backends-for-frontends"&gt;Backends for Frontends&lt;/h3&gt;
&lt;p&gt;TODO: Sometimes, it's just quicker to write APIs that deal with specific clients. It might take more maintenance, but that can be ok.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://learn.microsoft.com/en-us/azure/architecture/patterns/backends-for-frontends"&gt;Backends for Frontends pattern&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="bulkhead"&gt;Bulkhead&lt;/h3&gt;
&lt;p&gt;TODO: Bulkheads are used on ships to prevent water from a hull breach from flooding the whole ship. Keep things separate, (like connection pools or hardware) so an accident can't flood the whole ship.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://learn.microsoft.com/en-us/azure/architecture/patterns/bulkhead"&gt;Bulkhead Pattern&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="gateways"&gt;Gateways&lt;/h3&gt;
&lt;p&gt;TODO: Using a gateway for your microservices offers several benefits, by making your collection of services look like a single web server.&lt;/p&gt;
&lt;h4 id="aggregation"&gt;Aggregation&lt;/h4&gt;
&lt;p&gt;TODO: Clients can connect to a single endpoint to make requests, which are then
forwarded to different microservices. This makes the client connection light
and easy&lt;/p&gt;
&lt;p&gt;&lt;a href="https://learn.microsoft.com/en-us/azure/architecture/patterns/gateway-aggregation"&gt;Gateway Aggregation&lt;/a&gt;&lt;/p&gt;
&lt;h4 id="offloading"&gt;Offloading&lt;/h4&gt;
&lt;p&gt;TODO: The gateway can offload shared functionality, such as authentication, TLS
certificates or issuing Authorisation tokens.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://learn.microsoft.com/en-us/azure/architecture/patterns/gateway-offloading"&gt;Gateway Offloading&lt;/a&gt;&lt;/p&gt;
&lt;h4 id="routing"&gt;Routing&lt;/h4&gt;
&lt;p&gt;TODO: The service all appears to come from a single domain, so much easier for a
client to manage connections to and from the service, improving security.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://learn.microsoft.com/en-us/azure/architecture/patterns/gateway-routing"&gt;Gateway Routing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="sidecar"&gt;Sidecar&lt;/h3&gt;
&lt;p&gt;TODO: deploy helper apps into separate containers to encapsulate them, but keep
them close for performance.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://learn.microsoft.com/en-us/azure/architecture/patterns/sidecar"&gt;Sidecar Pattern&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="strangler"&gt;Strangler&lt;/h3&gt;
&lt;p&gt;TODO: Refactor over time, by gradually replacing specific services.&lt;/p&gt;
&lt;p&gt;&lt;a href="xref:strangler-pattern"&gt;Strangler Pattern&lt;/a&gt;&lt;/p&gt;
</content>
		<summary>Microservices are a collection of application services that are independently deployable, loosely coupled and organized around business capabilities.</summary>
	</entry>
	<entry>
		<id>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/patterns-and-antipatterns/strangler-pattern</id>
		<title>Strangler pattern</title>
		<link href="https://red-sand-078a6ea03.3.azurestaticapps.net/posts/patterns-and-antipatterns/strangler-pattern" />
		<link rel="enclosure" type="image" href="https://red-sand-078a6ea03.3.azurestaticapps.net/media/images/header01.png" />
		<updated>2023-05-02T00:00:00Z</updated>
		<content>&lt;p&gt;This pattern is used to migrate functionality from an older app to a new one. Typically, this is done for a monolith to a microservices model but works for any app.&lt;/p&gt;
&lt;h2 id="pattern-overview"&gt;Pattern Overview&lt;/h2&gt;
&lt;p&gt;Replacing a large monolithic system is complex and risky. The strangler pattern builds new functionality using modern design patterns alongside the monolith. A proxy is used to integrate the user experience and make sure the aligned application makes sense to end users. Over time the monolith is slowly broken down.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://farm4.staticflickr.com/3356/3600794227_4916f9924e_z.jpg" alt="The Strangler Fig Tree"&gt;&lt;/p&gt;
&lt;p&gt;Inspired by the Australian Strangler Fig Tree, which roots in the upper branches and grows down and around the tree, eventually taking root and destroying the original host tree.&lt;/p&gt;
&lt;p&gt;If you build something to help transition, take it away when you're finished with it.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://red-sand-078a6ea03.3.azurestaticapps.net/media/images/strangler-pattern-example.png" alt="Strangler pattern, over time"&gt;&lt;/p&gt;
&lt;p&gt;The first step shows the monolith, and then a companion service is added alongside, behind a proxy. The next step adds more services, transitioning over to the new model. The last step shows the monolith being removed, along with the proxy.&lt;/p&gt;
&lt;h2 id="benefits-of-this-pattern"&gt;Benefits of this pattern&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Provides a way to scale a solution over multiple dimensions.&lt;/li&gt;
&lt;li&gt;Delivers gradual value over time, with lower risk than a rewrite.&lt;/li&gt;
&lt;li&gt;Supports and allows for rollback.&lt;/li&gt;
&lt;li&gt;Uses versioned APIs, to reduce the need for collaboration.&lt;/li&gt;
&lt;li&gt;Supports legacy integrations.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="drawbacks-to-this-pattern"&gt;Drawbacks to this pattern&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Potential for increased latency because of new service dependencies.&lt;/li&gt;
&lt;li&gt;Additional proxy decreases availability through multiplicative failure effect.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="when-to-use-this-pattern"&gt;When to use this pattern&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Use the strangler for versioning and migration of services.&lt;/li&gt;
&lt;li&gt;Use an existing proxy, such as Nginx, as scaffolding during the migration.&lt;/li&gt;
&lt;li&gt;Manage the service rules during migration.&lt;/li&gt;
&lt;li&gt;Remove rules as no longer needed and decommission the proxy when done.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="when-to-avoid-this-pattern"&gt;When to avoid this pattern&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;If you have to add a facade, then don't also add a proxy as it increases the call depth and hits latency poorly.&lt;/li&gt;
&lt;li&gt;If latency is a concern, this won't help in the interim.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="approach"&gt;Approach&lt;/h2&gt;
&lt;p&gt;You can implement this pattern in two separate ways, scaling along the service domains, or between the new and old services. Ideally, both together works well.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Scaling along the service domains allows new services to be stood up and integrated.&lt;/li&gt;
&lt;li&gt;Scaling alongside the existing services allows for rollback and A/B testing between the new and old services, by sending a portion of calls to the new service.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Scaling along both these axis allows the target state to scale effectively.&lt;/p&gt;
&lt;h2 id="assumptions"&gt;Assumptions&lt;/h2&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://martinfowler.com/bliki/StranglerFigApplication.html"&gt;Martin Folwer - Strangler Fig Application&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.microsoft.com/en-us/azure/architecture/patterns/strangler-fig"&gt;Microsoft - Azure Architecture, Strangler Fig Pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://akfpartners.com/growth-blog/strangler-pattern-dos-and-donts"&gt;AKF Partners - Strangler Patterns: Dos and Don'ts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
		<summary>This pattern is used to migrate functionality from an older app to a new one.</summary>
	</entry>
	<entry>
		<id>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/requirements/reliability</id>
		<title>Reliability</title>
		<link href="https://red-sand-078a6ea03.3.azurestaticapps.net/posts/requirements/reliability" />
		<link rel="enclosure" type="image" href="https://red-sand-078a6ea03.3.azurestaticapps.net/media/images/header01.png" />
		<updated>2023-05-02T00:00:00Z</updated>
		<content>&lt;blockquote&gt;
&lt;p&gt;reliability, noun, /rɪˌlaɪ.əˈbɪl.ə.ti/. The quality of being able to be trusted or believed because of working or behaving well.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Reliable things do what you expect when you expect them. By ensuring we build reliable software, customers can easily access and use them.&lt;/p&gt;
&lt;p&gt;Reliability is one of the non-functional requirements (NFR) that defines the ability of the system to properly perform the required functions under predefined conditions for a certain period. It is commonly expressed through probability percentages predicting chances that the system won’t experience critical failure under normal usage and during the set time&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Read the &lt;a href="xref:requirements-checklist"&gt;Requirements Check-List&lt;/a&gt; article for an introduction to requirements.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="requirement"&gt;Requirement&lt;/h2&gt;
&lt;p&gt;Our systems will be available for 99.9% of the year.&lt;/p&gt;
&lt;h2 id="acceptance-criteria"&gt;Acceptance Criteria&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Measured over one year, the uptime of the application will exceed 99.9%&lt;/li&gt;
&lt;li&gt;During the first year, this will be extrapolated backwards and reviewed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="audience"&gt;Audience&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;System designers and software engineers.&lt;/li&gt;
&lt;li&gt;IT Professionals and operational engineers.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="details"&gt;Details&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Owner: Andy Sheldon, Chief Technology Officer&lt;/li&gt;
&lt;li&gt;Author: James Brewster, Enterprise Architect&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rationale"&gt;Rationale&lt;/h2&gt;
&lt;p&gt;TODO:&lt;/p&gt;
&lt;h2 id="related-principles"&gt;Related Principles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="xref:ease-of-use"&gt;Ease of Use&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
		<summary>&lt;p&gt;reliability, noun, /rɪˌlaɪ.əˈbɪl.ə.ti/. The quality of being able to be trusted or believed because of working or behaving well.&lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/requirements/usability</id>
		<title>Usability</title>
		<link href="https://red-sand-078a6ea03.3.azurestaticapps.net/posts/requirements/usability" />
		<link rel="enclosure" type="image" href="https://red-sand-078a6ea03.3.azurestaticapps.net/media/images/header01.png" />
		<updated>2023-04-28T00:00:00Z</updated>
		<content>&lt;p&gt;A usable system encourages use and trust.&lt;/p&gt;
&lt;p&gt;Usability, noun, /ˌjuːzəˈbɪləti/. Something easy to use, or the degree to which it is easy to use.&lt;/p&gt;
&lt;h2 id="requirement"&gt;Requirement&lt;/h2&gt;
&lt;p&gt;The system must have a user interface that is easy to navigate and understand.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The system should be set up to allow a user to complete their tasks quickly and directly.&lt;/li&gt;
&lt;li&gt;The interface needs to be intuitive so that minimal instruction is needed. If there is any area which is ambiguous or tricky, help needs to be included.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="acceptance-criteria"&gt;Acceptance Criteria&lt;/h2&gt;
&lt;p&gt;By demonstration&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The user interface must be intuitive and easy to navigate.&lt;/li&gt;
&lt;li&gt;The user interface must be easy to understand.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="audience"&gt;Audience&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;System designers and software engineers.&lt;/li&gt;
&lt;li&gt;IT Professionals and operational engineers.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="details"&gt;Details&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Owner: Andy Sheldon, Chief Technology Officer&lt;/li&gt;
&lt;li&gt;Author: James Brewster, Enterprise Architect&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rationale"&gt;Rationale&lt;/h2&gt;
&lt;p&gt;This requirement is important because it ensures that users can easily use the system without requiring extensive training or support.&lt;/p&gt;
&lt;h2 id="related-principles"&gt;Related Principles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="xref:ease-of-use"&gt;Ease-Of-Use&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
		<summary>The system must be intuitive and easy to use for all users.</summary>
	</entry>
	<entry>
		<id>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/requirements/security/owasp</id>
		<title>OWASP ASVS</title>
		<link href="https://red-sand-078a6ea03.3.azurestaticapps.net/posts/requirements/security/owasp" />
		<link rel="enclosure" type="image" href="https://red-sand-078a6ea03.3.azurestaticapps.net/media/images/header01.png" />
		<updated>2023-04-27T00:00:00Z</updated>
		<content>&lt;p&gt;The standard provides a basis for testing application technical security controls, as well as any technical security controls in the environment, that are relied on to protect against vulnerabilities such as Cross-Site Scripting (XSS) and SQL injection. This standard can be used to establish a level of confidence in the security of Web applications.&lt;/p&gt;
&lt;p&gt;The Roadmap for version 5 of the OWASP ASVS is available here: &lt;a href="https://github.com/OWASP/ASVS/wiki/Roadmap-to-version-5.0"&gt;https://github.com/OWASP/ASVS/wiki/Roadmap-to-version-5.0&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="requirements"&gt;Requirements&lt;/h2&gt;
&lt;p&gt;The following controls should be considered for every application:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/OWASP/ASVS/blob/v4.0.3/4.0/en/0x10-V1-Architecture.md"&gt;Architecture, design and threat modelling.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/OWASP/ASVS/blob/v4.0.3/4.0/en/0x11-V2-Authentication.md"&gt;Authentication.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/OWASP/ASVS/blob/v4.0.3/4.0/en/0x12-V3-Session-management.md"&gt;Session management.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/OWASP/ASVS/blob/v4.0.3/4.0/en/0x12-V4-Access-Control.md"&gt;Access Control.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/OWASP/ASVS/blob/v4.0.3/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md"&gt;Input Validation, output encoding, and parameterization.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/OWASP/ASVS/blob/v4.0.3/4.0/en/0x14-V6-Cryptography.md"&gt;Cryptography at rest.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/OWASP/ASVS/blob/v4.0.3/4.0/en/0x15-V7-Error-Logging.md"&gt;Error handling and logging.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/OWASP/ASVS/blob/v4.0.3/4.0/en/0x16-V8-Data-Protection.md"&gt;Data protection in transit.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/OWASP/ASVS/blob/v4.0.3/4.0/en/0x17-V9-Communications.md"&gt;Secure communication.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/OWASP/ASVS/blob/v4.0.3/4.0/en/0x18-V10-Malicious.md"&gt;Malicious Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/OWASP/ASVS/blob/v4.0.3/4.0/en/0x19-V11-BusLogic.md"&gt;Business Logic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/OWASP/ASVS/blob/v4.0.3/4.0/en/0x20-V12-Files-Resources.md"&gt;Files and Resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/OWASP/ASVS/blob/v4.0.3/4.0/en/0x21-V13-API.md"&gt;API and Web Service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/OWASP/ASVS/blob/v4.0.3/4.0/en/0x22-V14-Config.md"&gt;Configuration&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="audience"&gt;Audience&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;System designers and software engineers.&lt;/li&gt;
&lt;li&gt;IT Professionals and operational engineers.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="details"&gt;Details&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Owner: Andy Sheldon, Chief Technology Officer&lt;/li&gt;
&lt;li&gt;Author: James Brewster, Enterprise Architect&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rationale"&gt;Rationale&lt;/h2&gt;
&lt;p&gt;The primary aim of the OWASP Application Security Verification Standard (ASVS) Project is to normalize the range in the coverage and level of rigour available in the market when it comes to performing application security verification using a commercially-workable open standard. &lt;a href="https://owasp.org/www-pdf-archive/OWASP_ASVS_Standard_2008.pdf"&gt;This standard can be used to establish a level of confidence in the security of web applications and services&lt;/a&gt;. The OWASP ASVS Project provides developers with a &lt;a href="https://owasp.org/www-project-application-security-verification-standard/"&gt;list of requirements for secure development&lt;/a&gt;. By using this standard, developers can ensure that their applications are secure and that they meet &lt;a href="https://www.briskinfosec.com/blogs/blogsdetail/What-is-the-difference-between-OWASP-Top-10-and-ASVS-Security-Audit"&gt;industry standards for security&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;OWASP V4.0.3 Stable release, 27/04/2023. &lt;a href="https://github.com/OWASP/ASVS/tree/v4.0.3/4.0"&gt;https://github.com/OWASP/ASVS/tree/v4.0.3/4.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;OWASP Application Security Verification Standard, 27/04/2023. &lt;a href="https://owasp.org/www-project-application-security-verification-standard/"&gt;https://owasp.org/www-project-application-security-verification-standard/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
		<summary>The OWASP ASVS project provides developers with a list of requirements for secure development and testable security controls.</summary>
	</entry>
	<entry>
		<id>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/requirements/scalability</id>
		<title>Scalability</title>
		<link href="https://red-sand-078a6ea03.3.azurestaticapps.net/posts/requirements/scalability" />
		<link rel="enclosure" type="image" href="https://red-sand-078a6ea03.3.azurestaticapps.net/media/images/header01.png" />
		<updated>2023-04-27T00:00:00Z</updated>
		<content>&lt;p&gt;This non-functional requirement is concerned with the ability of the system to handle an increasing amount of work or its potential to be enlarged to accommodate that growth.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Read the &lt;a href="xref:requirements-checklist"&gt;Requirements Check-List&lt;/a&gt; article for an introduction to requirements.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="requirement"&gt;Requirement&lt;/h2&gt;
&lt;p&gt;The system must be able to scale to adequately support the business&lt;/p&gt;
&lt;h2 id="acceptance-criteria"&gt;Acceptance Criteria&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The system must be able to handle a minimum of 1000 concurrent users without any significant degradation in performance.&lt;/li&gt;
&lt;li&gt;On demonstration, the system should be able to scale up and down.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="audience"&gt;Audience&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;System designers and software engineers.&lt;/li&gt;
&lt;li&gt;IT Professionals and operational engineers.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="details"&gt;Details&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Owner: Andy Sheldon, Chief Technology Officer&lt;/li&gt;
&lt;li&gt;Author: James Brewster, Enterprise Architect&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rationale"&gt;Rationale&lt;/h2&gt;
&lt;p&gt;Rationale: Scalability is important because it ensures that the system can continue to function effectively as the workload increases.&lt;/p&gt;
&lt;h2 id="related-principles"&gt;Related Principles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="xref:ease-of-use"&gt;Ease-Of-Use&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="more-information"&gt;More Information&lt;/h2&gt;
&lt;p&gt;AKF PArtners introduced the concept of the scale cube in their 2018 Blog post on scalability. This is a scaling model which encourages design and engineering teams to think about scale around three separate axis:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;X-Axis, Technical architecture layering. Avoid single points of failure, build out multiple nodes which can serve requests and balance load.&lt;/li&gt;
&lt;li&gt;Y-Axis, Functional Decomposition. Break an application into components (microservices) and keep these different items in swim lanes.&lt;/li&gt;
&lt;li&gt;Z-Axis, Data Partioning. Separate user data for scale, availability and testing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;![The Scale Cube, AKFPartners, 2018][def1]
[def1]: https://akfpartners.com/uploads/misc/Scale_Cube.png&lt;/p&gt;
&lt;p&gt;Each axis in the cube needs to be able to scale and teams should keep this idea in mind as they design and build systems.&lt;/p&gt;
&lt;p&gt;A monolith application is the antithesis of the scale cube. An accurate realisation of this principle would be a Microservices architecture, hosted on a container platform, with a sharded database model.&lt;/p&gt;
&lt;p&gt;Scaling a large system is hard, and potentially expensive. Making changes can take too long and the required upgrades can be costly. Using a microservices model with small, stateless services which can scale independently allows each service change to be small, and the underlying costs to grow in smaller steps.&lt;/p&gt;
&lt;p&gt;Another difficulty is the complexity of a change. As more developers join a project, typically the project gets slower, not faster! Environment changes take longer, pull requests increase, and meetings take longer. The net effect is that large teams create too many dependencies, increasing development times. &lt;a href="https://en.wikipedia.org/wiki/Brooks%27s_law"&gt;Brooks Law&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When systems are large, they become increasingly complex, and in many cases, by this point, there are only 1-2 people who understand the system. This creates additional Single Points of Failure, in those people. It makes change riskier and more likely to require regression testing.&lt;/p&gt;
&lt;p&gt;For more information on this model, please refer to the AKF partners site, linked below.&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://akfpartners.com/growth-blog/the-scalability-cube-your-guide-to-evaluating-scalability"&gt;The Scalability Cube, Your Guide to Evaluating Scalability&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
		<summary>The system must be able to handle an increasing amount of work without any significant degradation in performance.</summary>
	</entry>
	<entry>
		<id>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/requirements/performance</id>
		<title>Performance</title>
		<link href="https://red-sand-078a6ea03.3.azurestaticapps.net/posts/requirements/performance" />
		<link rel="enclosure" type="image" href="https://red-sand-078a6ea03.3.azurestaticapps.net/media/images/header01.png" />
		<updated>2023-04-27T00:00:00Z</updated>
		<content>&lt;p&gt;Performance is one of the most important NFRs that specifies “how well” the “what&amp;quot; must behave. Performance NFRs are used to ensure that a system meets its performance requirements and that it performs as expected under various conditions. Performance NFRs can include response time, throughput, resource utilization, and capacity.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Read the &lt;a href="xref:requirements-checklist"&gt;Requirements Check-List&lt;/a&gt; article for an introduction to requirements.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="requirement"&gt;Requirement&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The system must be able to handle 1000 concurrent users.&lt;/li&gt;
&lt;li&gt;The system should respond within 2 seconds for 95% of all requests.&lt;/li&gt;
&lt;li&gt;Any underlying systems should be able to achieve this at no more than 60% utilisation before scaling occurs.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="acceptance-criteria"&gt;Acceptance Criteria&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;95% of system responses occur to the user within 2 seconds.&lt;/li&gt;
&lt;li&gt;The system can support more than 1,000 concurrent users and maintain the response time.&lt;/li&gt;
&lt;li&gt;Monitoring of infrastructure shows that active nodes are at 60-80% of utilisation during load.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="audience"&gt;Audience&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;System designers and software engineers.&lt;/li&gt;
&lt;li&gt;IT Professionals and operational engineers.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="details"&gt;Details&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Owner: Andy Sheldon, Chief Technology Officer&lt;/li&gt;
&lt;li&gt;Author: James Brewster, Enterprise Architect&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rationale"&gt;Rationale&lt;/h2&gt;
&lt;p&gt;This NFR is important because it ensures that the application is responsive and performs well under heavy load.&lt;/p&gt;
&lt;p&gt;An asynchronous response can take longer, as long as the interactive elements load quickly and explain any delays, while the asynchronous response is prepared.&lt;/p&gt;
&lt;h2 id="related-principles"&gt;Related Principles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="xref:ease-of-use"&gt;Ease-Of-Use&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
		<summary>&lt;p&gt;Performance is one of the most important NFRs that specifies “how well” the “what&amp;quot; must behave. Performance NFRs are used to ensure that a system meets its performance requirements and that it performs as expected under various conditions. Performance NFRs can include response time, throughput, resource utilization, and capacity.&lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/requirements/non-repudiation</id>
		<title>Non-repudiation</title>
		<link href="https://red-sand-078a6ea03.3.azurestaticapps.net/posts/requirements/non-repudiation" />
		<link rel="enclosure" type="image" href="https://red-sand-078a6ea03.3.azurestaticapps.net/media/images/header01.png" />
		<updated>2023-04-27T00:00:00Z</updated>
		<content>&lt;p&gt;Where possible, use immutable objects and data which can't be repudiated. Make sure we can trust our systems and our data.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Read the &lt;a href="xref:requirements-checklist"&gt;Requirements Check-List&lt;/a&gt; article for an introduction to requirements.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="requirement"&gt;Requirement&lt;/h2&gt;
&lt;p&gt;The system must provide a mechanism to ensure that a party cannot deny the authenticity of their signature on a document or message.&lt;/p&gt;
&lt;h2 id="acceptance-criteria"&gt;Acceptance Criteria&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The system shall provide a digital signature for each transaction.&lt;/li&gt;
&lt;li&gt;The digital signature shall be unique for each transaction.&lt;/li&gt;
&lt;li&gt;The digital signature shall be verified by the recipient of the transaction.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="audience"&gt;Audience&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;System designers and software engineers.&lt;/li&gt;
&lt;li&gt;IT Professionals and operational engineers.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="details"&gt;Details&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Owner: Andy Sheldon, Chief Technology Officer&lt;/li&gt;
&lt;li&gt;Author: James Brewster, Enterprise Architect&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rationale"&gt;Rationale&lt;/h2&gt;
&lt;p&gt;Non-repudiation provides proof of the origin, authenticity, and integrity of data. It assures the sender that the message was delivered, as well as proof of the sender’s identity to the recipient. This way, neither party can deny that a message was sent, received, and processed. Non-repudiation ensures that no party can deny that it sent or received a message via encryption and/or digital signatures or approved some information. It also cannot deny the authenticity of its signature on a document.&lt;/p&gt;
&lt;h2 id="related-principles"&gt;Related Principles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="xref:be-suspicious"&gt;Be Suspicious&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="xref:ease-of-use"&gt;Ease-Of-Use&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Describes non-repudiation as a property that ensures that a party cannot deny the authenticity of their signature on a document or the sending of a message that they originated: &lt;a href="https://www.perforce.com/blog/qac/what-is-iso-25010"&gt;https://www.perforce.com/blog/qac/what-is-iso-25010&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lists non-repudiation as one of the key non-functional requirements to be considered in software development. &lt;a href="https://www.boxuk.com/insight/guide-to-non-functional-requirements-types-and-examples/"&gt;https://www.boxuk.com/insight/guide-to-non-functional-requirements-types-and-examples/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
		<summary>A mechanism to ensure a party cannot deny the legitimacy of a transaction.</summary>
	</entry>
	<entry>
		<id>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/requirements/security/secure-configuration</id>
		<title>Secure Configuration</title>
		<link href="https://red-sand-078a6ea03.3.azurestaticapps.net/posts/requirements/security/secure-configuration" />
		<link rel="enclosure" type="image" href="https://red-sand-078a6ea03.3.azurestaticapps.net/media/images/header01.png" />
		<updated>2023-04-26T00:00:00Z</updated>
		<content>&lt;p&gt;This applies to servers, applications and cloud services.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Based on the NCSC.gov.uk 'Cyber Essentials Requirements for Infrastructure, January 2022. Modified to remove end user devices.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="requirement"&gt;Requirement&lt;/h2&gt;
&lt;p&gt;Computers and network devices must be properly configured to reduce the level of inherent vulnerabilities and only provide the services required to fulfil their role.&lt;/p&gt;
&lt;p&gt;Default configurations are often insecure, to make initial access easier. We must ensure any commodity services are reconfigured to ensure security.&lt;/p&gt;
&lt;p&gt;This can include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Default accounts, potentially with additional permissions.&lt;/li&gt;
&lt;li&gt;weak or known initial account passwords.&lt;/li&gt;
&lt;li&gt;Unnecessary or legacy services, which are easier to exploit.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These must be disabled or reconfigured.&lt;/p&gt;
&lt;h2 id="acceptance-criteria"&gt;Acceptance Criteria&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;On inspection, third-party components should not have common or default accounts and passwords enabled.&lt;/li&gt;
&lt;li&gt;Where possible, configuration should be backed-up and stored securely, to allow for re-verification.&lt;/li&gt;
&lt;li&gt;The configuration of a system has been reviewed with one or more peers and has been approved.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="audience"&gt;Audience&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;System designers and implementors.&lt;/li&gt;
&lt;li&gt;Organisational management&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="details"&gt;Details&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Owner: Andy Sheldon, Chief Technology Officer&lt;/li&gt;
&lt;li&gt;Author: James Brewster, Enterprise Architect&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rationale"&gt;Rationale&lt;/h2&gt;
&lt;p&gt;One of the most common ways to access a system is to use a default account or configuration, which has been left unsecured. By ensuring we verify these accounts and their configuration, we can help improve security and minimise breaches.&lt;/p&gt;
&lt;h2 id="related-principles"&gt;Related Principles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="xref:be-suspicious"&gt;Be Suspicious&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="xref:least-privilege"&gt;Least Privilege&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="xref:shift-security-left"&gt;Shift Security Left&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
		<summary>&lt;p&gt;This applies to servers, applications and cloud services.&lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/requirements/security/user-access-control</id>
		<title>User Access Control</title>
		<link href="https://red-sand-078a6ea03.3.azurestaticapps.net/posts/requirements/security/user-access-control" />
		<link rel="enclosure" type="image" href="https://red-sand-078a6ea03.3.azurestaticapps.net/media/images/header01.png" />
		<updated>2023-04-26T00:00:00Z</updated>
		<content>&lt;p&gt;This applies to servers, applications and cloud services.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Based on the NCSC.gov.uk 'Cyber Essentials Requirements for Infrastructure, January 2022. Modified to remove end user devices.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="requirement"&gt;Requirement&lt;/h2&gt;
&lt;p&gt;Access to a business system, or its data, is protected by a centrally managed named user account. The account can be configured to only allow access to the relevant data and processes.&lt;/p&gt;
&lt;p&gt;Accounts with special access privileges have an enhanced level of verification through a second factor, such as a verification message to a different, associated device or approval by a second party.&lt;/p&gt;
&lt;p&gt;Any account should have more than one named individual present. Owners and administrators need to be able to disable an account, with relevant verification.&lt;/p&gt;
&lt;h2 id="acceptance-criteria"&gt;Acceptance Criteria&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Any Authorisation is not performed by the application but by a dedicated authorisation application.&lt;/li&gt;
&lt;li&gt;Applications obey trusted authorisation tokens from that application.&lt;/li&gt;
&lt;li&gt;Tokens only grant access to the relevant data, necessary for the role the user has.&lt;/li&gt;
&lt;li&gt;Roles are granular and can be subdivided where necessary.&lt;/li&gt;
&lt;li&gt;Application and data access is protected, ensuring a second check.&lt;/li&gt;
&lt;li&gt;Special access privileges, such as deleting an account, require a second factor or verification.&lt;/li&gt;
&lt;li&gt;Options for Multi-factor authentication should be present and are strongly recommended.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="audience"&gt;Audience&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;System designers and implementors.&lt;/li&gt;
&lt;li&gt;Organisational management&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="details"&gt;Details&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Owner: Andy Sheldon, Chief Technology Officer&lt;/li&gt;
&lt;li&gt;Author: James Brewster, Enterprise Architect&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rationale"&gt;Rationale&lt;/h2&gt;
&lt;p&gt;Ensuring our customer's data is secure is important. Ensuring they can manage access to that data is important. Giving them a feeling of security and trust is important.&lt;/p&gt;
&lt;p&gt;Reflecting our brand values, our commitment to security and our capability to manage data and services for them is important.&lt;/p&gt;
&lt;h2 id="related-principles"&gt;Related Principles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="xref:be-suspicious"&gt;Be Suspicious&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="xref:least-privilege"&gt;Least Privilege&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="xref:shift-security-left"&gt;Shift Security Left&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
		<summary>&lt;p&gt;This applies to servers, applications and cloud services.&lt;/p&gt;</summary>
	</entry>
</feed>