<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
	<channel>
		<title />
		<link>https://red-sand-078a6ea03.3.azurestaticapps.net/</link>
		<description />
		<copyright>Copyright James Brewster© 2023</copyright>
		<pubDate>Tue, 23 May 2023 13:09:37 GMT</pubDate>
		<lastBuildDate>Tue, 23 May 2023 13:09:37 GMT</lastBuildDate>
		<item>
			<title>Structuring Development</title>
			<link>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/solutions/2023-05-23-structuring-development</link>
			<description>Some words</description>
			<enclosure url="https://red-sand-078a6ea03.3.azurestaticapps.net/media/header01.png" length="0" type="image" />
			<guid>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/solutions/2023-05-23-structuring-development</guid>
			<pubDate>Tue, 23 May 2023 09:09:03 GMT</pubDate>
			<content:encoded>&lt;h2 id="work-item-types"&gt;Work Item Types&lt;/h2&gt;
&lt;p&gt;Work items in development tend to fall into three broad types, but the names tend to change, depending on the place, process or tools used. The most common types are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Requirements / User Stories / Issues - The smallest unit of work. Intended to be sized so that a team can manage 1+ in the smallest unit of time (usually a sprint), but purely for convieniance.&lt;/li&gt;
&lt;li&gt;Features - Groups of requirements, stories or Issues which can be delivered in time for the next release. Some frameworks use 'Capabilities' as a feature which has to be delivered by more than one team because there is a dependency. This should be avoided, but worth knowing about.&lt;/li&gt;
&lt;li&gt;Epics / Initiatives / Projects - Big themes or ideas with significant market value, which generally require special investment. Usually made of a load of features. Generally, an Epic is formed as an idea with a significant outcome, explored and tested as a high-level concept, before being broken down into features.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This said the best practice with agile development is to minimise and factor down work as you get closer to development. Try and avoid big projects. The structures above can be helpful for management or executive discussions, especially with larger teams. Just remember that you want to give developers small, well-formed requirements, not vacuous epics.&lt;/p&gt;
&lt;h2 id="requirements-user-stories-issues"&gt;Requirements / User Stories / Issues&lt;/h2&gt;
&lt;p&gt;The smallest unit of work. Requirements are discussed in more depth &lt;a href="xref:requirements-checklist"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;NASA have a great page on defining a good requirement &lt;a href="https://www.nasa.gov/seh/appendix-c-how-to-write-a-good-requirement/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Requirements need to be Clear, Complete, Compliant and Consistent. They should state assumptions and have clear acceptance criteria. They should express the persona to who the requirement applies, where necessary.&lt;/p&gt;
&lt;h3 id="loaded-terms"&gt;Loaded terms&lt;/h3&gt;
&lt;p&gt;In a requirement, you often use loaded words to express importance. These terms are worth managing:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Must - Critical to the success of the solution&lt;/li&gt;
&lt;li&gt;Should - Required for completeness, but optional for testing&lt;/li&gt;
&lt;li&gt;Could - Optional, but good to have.&lt;/li&gt;
&lt;li&gt;Won't - Considered and avoided. May require more data to verify.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="example-requirements"&gt;Example Requirements&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;The application should load and refresh within 2 seconds. - Whilst we could release or test without this, for scale and production use we feel its critical.&lt;/li&gt;
&lt;li&gt;The user interface should follow the corporate brand guidance.&lt;/li&gt;
&lt;li&gt;The application must partition individual broker data. - Without partitioned data, this application won't work or teach us anything.&lt;/li&gt;
&lt;li&gt;The database could work across one or more cloud providers. - We think there is value in supporting this, but not at the expense of delaying the release.&lt;/li&gt;
&lt;li&gt;The application won't support internationalisation. - Whilst often a good practice, it can be time-consuming. If we know this app will only be used in English, that time might be better used.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="features"&gt;Features&lt;/h2&gt;
&lt;p&gt;Features are releasable groups of requirements. It may be a natural collection of things which are needed to make the whole useful or complete. A feature should have a tangible value, which can be tested and expressed. Prioritisation happens at the feature level, with delivery teams structuring the order of requirements into an iteration of work (sprint or whatever).&lt;/p&gt;
&lt;p&gt;There's no fixed size, they can be bigger or smaller. If a feature takes multiple sprints to develop that's okay, but it needs to be iterated and testable at each point. The team should be learning about the right way to deliver the feature. There must be some ability to reflect on what went well and what didn't, to make sure there is a culture of improvement.&lt;/p&gt;
&lt;h2 id="epics-initiatives-projects"&gt;Epics / Initiatives / Projects&lt;/h2&gt;
&lt;p&gt;Agile dislikes large things. Executives love them. Epics/Initiatives/projects exist to allow larger-scale themes and ideas to exist and abstract communication. They are typically used as shorthand when discussing portfolio packages of work, or work which happens across multiple quarters or years.&lt;/p&gt;
&lt;p&gt;Depending on the framework, some types (Themes mainly) are very long-lived. Most organisations struggle with this concept and most non-agile execs prefer clear end states for projects.&lt;/p&gt;
&lt;h2 id="releases"&gt;Releases&lt;/h2&gt;
&lt;p&gt;Releases happen when work is done and ready to be given to a customer. It could be an early release to just 1-2 customers for testing purposes. It could be a production release with lots of new features. It depends on the market, the organisation and the process.&lt;/p&gt;
&lt;p&gt;Some agile philosophy talks about having smaller releases. This can be good in some situations, but it requires an extensive test framework to guarantee everything works. Philosophies like CI/CD are intended to reduce manual overhead and make sure work can be delivered quickly from developers into a live environment.&lt;/p&gt;
&lt;p&gt;Some customers or markets don't like rapid change. In regulated and controlled environments, change can require a whole raft of retraining or recertifying, which can increase the cost of a release for the customer. To that end, release cadence is largely dictated by change tolerance, change fatigue and release maturity.&lt;/p&gt;
&lt;p&gt;Whilst some people or places will talk about moving to 'release-on-demand' or having a CI/CD process. It is not essential. It does have benefits, but also overheads.&lt;/p&gt;
&lt;h2 id="time-to-value"&gt;Time-To-Value&lt;/h2&gt;
&lt;p&gt;An important release metric/feature metric is time to value. Understanding how quickly an organisation can get value from its investment in development is critical to success as a Product manager; I would argue that this is a key concern. To improve Time-To-Value:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Keep features small. As small as you can. Dev/Architecture will add loads of requirements anyway.&lt;/li&gt;
&lt;li&gt;Minimise requirements to -just- the essentials, easier to add more later.&lt;/li&gt;
&lt;li&gt;Articulate requirements clearly and consistently.&lt;/li&gt;
&lt;li&gt;Deliver one feature at a time to minimise work in progress.&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Technical Debt Framework</title>
			<link>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/solutions/technical-debt-framework</link>
			<description>Help teams manage technical debt by identifying and assessing existing debt across the enterprise and prioritizing items in an orderly fashion.</description>
			<enclosure url="https://red-sand-078a6ea03.3.azurestaticapps.net/media/header01.png" length="0" type="image" />
			<guid>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/solutions/technical-debt-framework</guid>
			<pubDate>Tue, 23 May 2023 00:00:00 GMT</pubDate>
			<content:encoded>&lt;blockquote&gt;
&lt;h2 id="tldr"&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;Technical debt is a hidden bleed on cost, productivity and morale. You can address it by accepting it exists, socialising the subject and putting in place ways to address it without blame.&lt;/p&gt;
&lt;p&gt;There are three main forms, process, people or technology. These relate to what you have neglected to maintain. They are best addressed as an accepted part of life, rather than with any major effort.&lt;/p&gt;
&lt;p&gt;Leave space in your team's workflow to accommodate and address these issues and rather than being a debt which is compounding liability against your business, it will become a compounding investment, which pays for itself over time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;
&lt;p&gt;We have all been there. There's an urgent problem. There's software that should resolve it and make everything great.&lt;/p&gt;
&lt;p&gt;So we get it. And install it, and then someone doesn't quite finish installing it. And something doesn't work properly. Or someone leaves, and now no one knows how to fix that one thing, and everyone spends time working around it.&lt;/p&gt;
&lt;p&gt;And we have to upgrade it every few months in some complicated ritual. And the renewals just seem to get more expensive and complicated every year...&lt;/p&gt;
&lt;p&gt;This is technical debt. It's the well-meant shortcut we took to speed something up. And now, it's unmanaged and not being repaid. The business is paying 'interest' on it. And like a lot of credit, the interest can be destructive.&lt;/p&gt;
&lt;h2 id="symptoms"&gt;Symptoms&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;If technology or process decisions require meetings to work around or make decisions, you probably have technical debt.&lt;/li&gt;
&lt;li&gt;If changes take a long time to make, and as such, decisions to make changes take a long time as well, you probably have technical debt.&lt;/li&gt;
&lt;li&gt;If simple changes or expectable business requirements take a long time to be delivered, you probably have technical debt.&lt;/li&gt;
&lt;li&gt;If your developers always estimate far too low and deliver way later, then you probably have technical debt.&lt;/li&gt;
&lt;li&gt;If you use technology in your business, you probably have technical debt.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="the-scale-of-the-issue"&gt;The scale of the issue&lt;/h2&gt;
&lt;p&gt;In a 2020 survey, McKinsey asked a group of CIOs who are part of a panel, what percentage of their budget was being diverted to managing tech debt, and they responded that 10-20% was typical.&lt;/p&gt;
&lt;p&gt;More worrying was the statistic that CIOs felt the value of the technical assets was made up of 20-40% tech debt, before depreciation.&lt;/p&gt;
&lt;p&gt;More recently, a repeat of this study found that 60% of CIOs felt their organisation's tech debt had perceptibly increased over the past three years.&lt;/p&gt;
&lt;p&gt;On a more positive note, the same whitepaper quoted a former CIO at a major cloud provider:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;By reinventing our debt management, we went from 75 percent of engineer time paying the [tech debt] ‘tax’ to 25 percent. It allowed us to be who we are today.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="background"&gt;Background&lt;/h2&gt;
&lt;p&gt;At WyCash in 1992, Ward Cunningham used the term Technical debt to explain to management why iterative software development was a better choice:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Shipping first time code is like going into debt. A little debt speeds development so long as it is paid back promptly with a rewrite… The danger occurs when the debt is not repaid. Every minute spent on not-quite-right code counts as interest on that debt. Entire engineering organizations can be brought to a stand-still under the debt load of an unconsolidated implementation, object-oriented or otherwise. — Ward Cunningham, The WyCash Portfolio Management System, 1992&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ward Cunningham was also one of the authors of the Agile Manifesto in 2008.&lt;/p&gt;
&lt;p&gt;The analogy keeps going. Not paying technical debt, like credit cards, can swiftly compound the interest. Conversely, paying down technical debt early, by refactoring in advance to improve quality is like saving. That can also compound, improving the agility of your software, and increasing its value and productivity over time, quite drastically.&lt;/p&gt;
&lt;p&gt;Martin Fowler, noted author and software architect, had this to say:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In the book, I make the following definition of “refactoring”&lt;/p&gt;
&lt;p&gt;&lt;em&gt;noun&lt;/em&gt;: a change made to the internal structure of software to make it easier to understand and cheaper to modify without changing its observable behavior&lt;/p&gt;
&lt;p&gt;&lt;em&gt;verb&lt;/em&gt;: to restructure software by applying a series of refactorings without changing its observable behavior. -Martin Fowler, refactoring.com&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, if you push features too quickly, and do not give your development teams time to refactor, reassess and improve the systems you rely on, it will get more expensive to work on. Over time, these systems become less of an asset and more of a liability.&lt;/p&gt;
&lt;h2 id="types-and-causes"&gt;Types and causes&lt;/h2&gt;
&lt;p&gt;None of this is done deliberately. Market conditions, business needs and markets all change. The assumption that machines will survive that change, without proactive maintenance is disproven. So why do we not treat &amp;quot;software machines&amp;quot; or the business systems that use them, with the same care?&lt;/p&gt;
&lt;p&gt;The primary cause is an over-focus on the immediate, without concern for the future. Short-sighted needs, month-end targets, and shareholder dividends, all drive short-term thinking. &amp;quot;We'll fix it tomorrow&amp;quot; doesn't work if you don't care about tomorrow.&lt;/p&gt;
&lt;p&gt;Technical debt can be easily thought of in three types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Process debt. The lack of appropriate or correct frameworks to operate modern systems in modern ways.&lt;/li&gt;
&lt;li&gt;People debt. The lack of skills, knowledge and training for people to properly engage in current technologies and processes.&lt;/li&gt;
&lt;li&gt;Technical debt. Unmaintained systems and software, where the cost to maintain or update is increased and keeps increasing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Whilst most people will recognise the third, I suspect a lot ignore or don't consider the first two. I would argue the first is the most worry-some. Process debt leads shows up in phrases like 'That's not how we do that' and frustrations with 'the way things are'. It makes people feel disempowered. Being unable to make things better makes people feel helpless.&lt;/p&gt;
&lt;p&gt;Everyone acknowledges that education is good, but employees want to feel cared about and invested in. Ensuring that training happens is important for employee engagement, as well as productivity. It means they know how to use the systems the business invests in, as well as care about the way the business works.&lt;/p&gt;
&lt;h2 id="framework-for-managing-technical-debt"&gt;Framework for Managing Technical Debt&lt;/h2&gt;
&lt;p&gt;Technical debt management boils down to one point. You have to pay it back. It will not go away. Factor it into daily work. If it's low, use the time to pay it forward (invest) rather than focus on the next new shiny thing.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The author would recommend giving it up to a 25% share of the work budget to team led 'improvement', which includes tech debt. It may be that this flexes up and down a bit, but 20-25% in the long term will keep your software improving.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The goal is not to remove tech debt entirely but to keep it at a workable level.&lt;/p&gt;
&lt;p&gt;Companies need to identify and track tech debt, to ensure it can be managed to the best advantage.&lt;/p&gt;
&lt;p&gt;Tech debt should be dealt with strategically. These principles, based on work from McKinsey, may help:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Start with a shared definition of tech debt. Executive and senior management need to have the same understanding of what constitutes tech debt; Process, people and technology, which need upgrading.&lt;/li&gt;
&lt;li&gt;Treat tech debt as 'waste in the P&amp;amp;L' of the business. Leaders should acknowledge the capital and opportunity cost of this and have access to information and metrics to track it.&lt;/li&gt;
&lt;li&gt;Make sure the total cost of the application, its development, cost to serve and debt is tracked. It should cover 100% of the resources necessary. If that changes how you account, then change how you account. (See 'process debt' above)&lt;/li&gt;
&lt;li&gt;Have an agreed process, which &lt;em&gt;doesn't penalise&lt;/em&gt; teams or people for addressing tech debt. Make sure that incentives encourage the right behaviour and that addressing tech debt is treated as a positive. Don't blame people for it either, someone made that decision with a good intention.&lt;/li&gt;
&lt;li&gt;Have teams Create items in the product backlog with value, cost, etc. attached. Prioritise a percentage of them in every sprint, to make sure the value is understood and visible. Treat them as features, just like others and value them. They weren't written up for the fun of it...&lt;/li&gt;
&lt;li&gt;Don't paralyze or immobilise a business to pay tech debt. It rarely works and isn't sustainable. It encourages people to think someone will just stop everything to fix things. Instead, set down time and resources in daily work to address debt consistently, either proactively or reactively, depending on the team and the workload.&lt;/li&gt;
&lt;li&gt;When all else fails, if a product or value stream is 'bankrupt' and can't service its debts (i.e. its 'interest' is &amp;gt;50% or so), then explore the option to replace the whole stack. It's drastic, but it may be a lower-risk option and save the product/service.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="identifying-technical-debt"&gt;Identifying Technical Debt&lt;/h3&gt;
&lt;p&gt;Sticking to a financial analogy, you can think of tech debt as having two components, just like any other debt:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The principal. This is the total work required to bring the stack, including processes and people, up to date.&lt;/li&gt;
&lt;li&gt;The interest. is the complexity tax which every single project pays right now. The spike work to understand how to make a change, or use a commodity technology. The debug work to figure out how version x.x varies from x.y. This is the interest and it's paid in productivity.
McKinsey also says that most organisations are paying way more than 10% interest on this debt, as it causes a significant drag on their projects and resources.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://www.mckinsey.com/%7E/media/mckinsey/business%20functions/mckinsey%20digital/our%20insights/tech%20debt%20reclaiming%20tech%20equity/svg-tech-debt-exhibit-2.svgz?cq=50&amp;amp;cpy=Center" alt="Tech Debt Principle and Interest" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Principal and interest create a strong drag on enterprise value. &lt;a href="https://www.mckinsey.com/capabilities/mckinsey-digital/our-insights/tech-debt-reclaiming-tech-equity"&gt;Tech debt: Reclaiming tech equity | McKinsey (2020) www.mckinsey.com.&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="tracking-technical-debt"&gt;Tracking Technical Debt&lt;/h3&gt;
&lt;p&gt;Tech debt should be tracked by the team/group as a key metric. It may be that you have to find a way to expose or count the cost of this debt, which isn't always easy. Some areas you can track:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Software Development
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://linearb.io/blog/what-is-code-complexity/"&gt;Complexity&lt;/a&gt; - Various code complexity metrics can be tracked and monitored on each project to understand where the complexity lies and help identify areas which need work.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dzone.com/articles/8-top-metrics-for-measuring-your-technical-debt"&gt;New Bugs vs Closed Bugs&lt;/a&gt; - Are your bugs growing or falling?&lt;/li&gt;
&lt;li&gt;&lt;a href="https://linearb.io/blog/how-to-measure-technical-debt/#:%7E:text=Measuring%20Technical%20Debt%3A%20Identify%20High-Risk%20Areas%201%20Keep,Risk%20and%20Add%20Importance%20to%20the%20Mix%20"&gt;Testing Effort&lt;/a&gt; - An easy approximation is to look at test coverage. Test coverage isn't a golden bullet by any means; whilst a low value is a warning, a high volume doesn't mean the tests are good, coverage can show how well-understood a code base is. As such, have a threshold, such as 80% as a target.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Infrastructure - Track the cost to service and host the application. Compare the current choice with the preferred pattern for hosting the application.&lt;/li&gt;
&lt;li&gt;Architectural - Does the application follow the organisation's standards and recommendations? Does it follow the vendor's deployment guidance? If it is non-standard, then it will be more expensive/riskier to host and fix. It may cause complexity to host and manage.&lt;/li&gt;
&lt;li&gt;Training - Do you need to hire people for every new technology? Are your team unable to spend time looking at potentially valuable new tools and technologies?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you mix these with importance and risk, you can approximate the 'value' and start to create a backlog of tech debt.&lt;/p&gt;
&lt;h3 id="managing-technical-debt"&gt;Managing Technical Debt&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Have your teams identify tech debt and create features in their existing backlogs for tech debt. Tag them with 'Tech-debt', so they can be reported on and analysed.
&lt;ul&gt;
&lt;li&gt;Do not create a separate backlog. this will slow things down. One team, one backlog.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Track each feature with risk and importance. This includes tech debt. During sprint planning, pull tech debt items into the backlog to fill up the first 25%. Feel free to move some out to make way for important features, but prioritise debt over 'Should' or 'Could' features.
&lt;ul&gt;
&lt;li&gt;Remember, each debt you deal with gives you more bandwidth tomorrow. The compound interest of tech debt payoff can be huge.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Make sure your product managers understand the value of this work and support it. They need to be able to prioritise tech debt and understand what that budget is doing and where it is going.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Technical debt is a shortcut that was made to speed something up. It’s a lack of appropriate or correct frameworks to operate modern systems in modern ways. It’s the lack of skills, knowledge and training for people to properly engage in current technologies and processes. It’s unmaintained systems and software, where the cost to maintain or update is increased and keeps increasing.&lt;/p&gt;
&lt;p&gt;Every business has these.&lt;/p&gt;
&lt;p&gt;Technical debt management boils down to one point. Pay it back. The goal is not to remove tech debt but to keep it at a workable level. Companies need to identify and track tech debt, to ensure it can be managed to the best advantage.&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.mckinsey.com/capabilities/mckinsey-digital/our-insights/tech-debt-reclaiming-tech-equity"&gt;Tech debt: Reclaiming tech equity | McKinsey (2020) www.mckinsey.com&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://linearb.io/blog/how-to-measure-technical-debt/#:%7E:text=Measuring%20Technical%20Debt%3A%20Identify%20High-Risk%20Areas%201%20Keep"&gt;How to Measure Technical Debt Before You Start Tackling It | LinearB (2022) linearb.io&lt;/a&gt; (Accessed: 16 May 2023).&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.visionarycto.com/p/my-20-year-career-is-technical-debt"&gt;My 20-year career is technical debt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Avoiding Work</title>
			<link>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/solutions/2023-05-23-avoiding-work</link>
			<enclosure url="https://red-sand-078a6ea03.3.azurestaticapps.net/media/header01.png" length="0" type="image" />
			<guid>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/solutions/2023-05-23-avoiding-work</guid>
			<pubDate>Tue, 23 May 2023 00:00:00 GMT</pubDate>
			<content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;
&lt;p&gt;One of the most important things a product manager can do is ensure that only critical work is prioritised. Any work which you want to do needs to be the most valuable thing.&lt;/p&gt;
&lt;p&gt;How do you make sure the work you do is valuable?&lt;/p&gt;
&lt;p&gt;It's important to avoid 'make-work'. Thats not your job to keep developers busy or ensure backlogs are stuffed. If there's no valuable work ready, then don't propose it.&lt;/p&gt;
&lt;h2 id="defining-work"&gt;Defining work&lt;/h2&gt;
&lt;h3 id="types-of-work"&gt;Types of work&lt;/h3&gt;
&lt;h2 id="planning-work"&gt;Planning Work&lt;/h2&gt;
&lt;h3 id="sprints-and-pis"&gt;Sprints and PIs&lt;/h3&gt;
&lt;h2 id="managing-work"&gt;Managing work&lt;/h2&gt;
&lt;h2 id="anatomy-of-a-healthy-backlog"&gt;Anatomy of a healthy backlog&lt;/h2&gt;
&lt;h2 id="kanban"&gt;Kanban&lt;/h2&gt;
&lt;h2 id="not-a-project-manager"&gt;Not a Project Manager&lt;/h2&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Identity, Authentication and Authorisation</title>
			<link>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/patterns-and-antipatterns/identity-auth</link>
			<description>Authenticating users in microservices can be fraught with perils...</description>
			<enclosure url="https://red-sand-078a6ea03.3.azurestaticapps.net/media/header01.png" length="0" type="image" />
			<guid>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/patterns-and-antipatterns/identity-auth</guid>
			<pubDate>Tue, 16 May 2023 00:00:00 GMT</pubDate>
			<content:encoded>&lt;h2 id="pattern-overview"&gt;Pattern Overview&lt;/h2&gt;
&lt;p&gt;This pattern describes a central authentication model, suitable for a microservices web application. It builds on several other patterns, to provide a scalable way to identify, authenticate and authorise access to resources, data and services.&lt;/p&gt;
&lt;p&gt;In this example, a role-based authorization model is being used. Customer policies would be more configurable, but also more complex.&lt;/p&gt;
&lt;h3 id="illustration"&gt;Illustration&lt;/h3&gt;
&lt;p&gt;&lt;img src="https://learn.microsoft.com/en-us/dotnet/architecture/microservices/secure-net-microservices-web-applications/media/index/api-gateway-centralized-authentication.png" alt="API Gateway Centralized authentication" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://learn.microsoft.com/en-us/dotnet/architecture/microservices/secure-net-microservices-web-applications/"&gt;Rousos (2023) Securing .NET Microservices and Web Applications, learn.microsoft.com.&lt;/a&gt;(Accessed: 16 May 2023).‌&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this instance, a mobile app is shown. But a static site, calling an API, a Single Page Application, or an MVC application would use a similar method. This could use the &lt;a href="https://akfpartners.com/growth-blog/backend-for-frontend#:%7E:text=In%20the%20Backend%20for%20Frontend%20pattern%2C%20a%20service,differ%20from%20a%20traditional%20API%20or%20monolithic%20gateway."&gt;Backends-For-Frontends&lt;/a&gt; pattern, to offset any differences.&lt;/p&gt;
&lt;h2 id="benefits-of-this-pattern"&gt;Benefits of this pattern&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;By using the gateway, authentication is offloaded to the gateway and centralised. &lt;a href="xref:gateways"&gt;Gateways&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The gateway issues a signed token, which contains the authorised user's roles, which can be used for the lifespan of the token, reducing chatter. &lt;a href="xref:microservices-anti-patterns"&gt;Microservices Anti-patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The token is long-lived, reducing user frustration. &lt;a href="xref:ease-of-use"&gt;Ease-of-Use&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Once implemented, downstream services simply need to have their role added to the token and respect it.&lt;/li&gt;
&lt;li&gt;Identity management and storage can be offloaded to the customer's preferred vendor, using open standards, Including:
&lt;ul&gt;
&lt;li&gt;Microsoft, Google or Facebook identities, such as Microsoft AzureAD B2C.&lt;/li&gt;
&lt;li&gt;Microsoft Azure AD identities, using B2B Federation.&lt;/li&gt;
&lt;li&gt;Any OpenID Connect or OAuth2.0 Identities.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="drawbacks-to-this-pattern"&gt;Drawbacks to this pattern&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;It assumes simple role-based authorisation. A more complex policy-based model would require additional depth and complexity in the token, increasing its size and complexity.&lt;/li&gt;
&lt;li&gt;The token is fairly easy to 'crack', so should never be shared outside the network. A separate reference token model is recommended, where the token is used within the cluster, and used by the gateway as a delegated authorisation.
&lt;ul&gt;
&lt;li&gt;The user would have a lean token or reference cookie, which only correlates to the token on the gateway. Think of this model as a delegation model, rather than an authorisation model.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;This creates a dependency on external identity vendors, which can be hard to manage.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="when-to-use-this-pattern"&gt;When to use this pattern&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;This pattern, together with the &lt;a href="xref:gateways"&gt;Gateways&lt;/a&gt;, is recommended in most enterprise or B2B microservice models. It is ideal for a containerised application, which needs to minimise cross-talk and have a planned model for authorisation and identity.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="when-to-avoid-this-pattern"&gt;When to avoid this pattern&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;This pattern is not suitable for use on unsecured networks. The contents of the token can be used to understand the user and their roles.
&lt;ul&gt;
&lt;li&gt;This pattern still promotes zero-trust, as every service will validate the token, and must trust the issuer and check for tampering.&lt;/li&gt;
&lt;li&gt;Using a reference token, issued at the gateway to the external user, which does NOT contain any useful information can mitigate this.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nordicapis.com/how-to-control-user-identity-within-microservices/"&gt;NordicAPIs - How to control user identity within microservices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/&amp;#64;maison.moa/using-jwt-json-web-tokens-to-authorize-users-and-protect-api-routes-3e04a1453c3e"&gt;Using JWT to authorize users and protect API routes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.microsoft.com/en-us/dotnet/architecture/microservices/secure-net-microservices-web-applications/"&gt;Make secure .NET Microservices and Web Applications&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Intellectual Property</title>
			<link>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/principles/intellectual-property</link>
			<description>This page explains the importance of protecting intellectual property and provides examples of legal protections for intellectual property.</description>
			<enclosure url="https://red-sand-078a6ea03.3.azurestaticapps.net/media/header01.png" length="0" type="image" />
			<guid>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/principles/intellectual-property</guid>
			<pubDate>Mon, 15 May 2023 00:00:00 GMT</pubDate>
			<content:encoded>&lt;blockquote&gt;
&lt;p&gt;&amp;quot;An ounce of prevention is worth a pound of cure. - Benjamin Franklin&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="statement"&gt;Statement&lt;/h2&gt;
&lt;p&gt;The business should retain control of its intellectual property and ensure that it is not used without permission.&lt;/p&gt;
&lt;h2 id="rationale"&gt;Rationale&lt;/h2&gt;
&lt;p&gt;Intellectual property is a valuable asset for the business. It is important to protect and manage the intellectual property of the business.&lt;/p&gt;
&lt;h2 id="implications"&gt;Implications&lt;/h2&gt;
&lt;p&gt;The business should ensure that its intellectual property is protected from infringement by others. Intellectual property should be managed in a way that maximizes its value to the business while minimizing the risk of infringement.&lt;/p&gt;
&lt;h3 id="details-and-context"&gt;Details and Context&lt;/h3&gt;
&lt;p&gt;Intellectual property is important because it is a valuable asset for the business. It can include patents, trademarks, copyrights, trade secrets, and other proprietary information.&lt;/p&gt;
&lt;p&gt;Protecting intellectual property can help the business maintain its competitive advantage and prevent others from using its ideas or products without permission. It can also help the business generate revenue through licensing agreements or other means.&lt;/p&gt;
&lt;p&gt;Managing intellectual property can be complex and requires careful planning and execution. The business should have policies and procedures in place to protect its intellectual property and ensure that it is not used without permission. This can include measures such as confidentiality agreements, non-disclosure agreements, and other legal protections.&lt;/p&gt;
&lt;p&gt;There are several legal protections for intellectual property. Some of the most common include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Patents: A patent is a legal protection for an invention or process. It gives the inventor the exclusive right to make, use, and sell the invention for a certain period.&lt;/li&gt;
&lt;li&gt;Trademarks: A trademark is a symbol, word, or phrase that identifies and distinguishes a product or service from those of others. It can be registered with the government to provide legal protection.&lt;/li&gt;
&lt;li&gt;Copyrights: A copyright is a legal protection for original works of authorship such as books, music, and software. It gives the creator the exclusive right to reproduce and distribute the work.&lt;/li&gt;
&lt;li&gt;Trade secrets: A trade secret is a confidential piece of information that provides a competitive advantage to a business. It can include things like formulas, processes, and customer lists.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are other legal protections available as well, depending on the type of intellectual property involved. It’s important to consult with an attorney who specializes in intellectual property law to determine the best course of action for your business.&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.gov.uk/guidance/patents"&gt;Patents - gov.uk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.gov.uk/register-a-trademark"&gt;Trademarks - gov.uk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.gov.uk/copyright"&gt;Copyright - gov.uk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.gov.uk/guidance/protect-your-trade-secrets"&gt;Trade Secrets - gov.uk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Dumb Pipes</title>
			<link>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/patterns-and-antipatterns/dumb-pipes</link>
			<description>This page is about designing and implementing effective communication between microservices in a distributed system.</description>
			<enclosure url="https://red-sand-078a6ea03.3.azurestaticapps.net/media/header01.png" length="0" type="image" />
			<guid>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/patterns-and-antipatterns/dumb-pipes</guid>
			<pubDate>Mon, 15 May 2023 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;As services scale in a microservices architecture, they need to communicate. A communication network is important, to make sure each service can easily talk to the others, but as they scale, it's important to make sure they can grow and continue to communicate.&lt;/p&gt;
&lt;p&gt;This pattern uses the principle of 'Smart end-points, dumb pipes'. If the pipes are clever, they need maintenance, everyone has to wait on the team which is responsible for the pipe, which reduces time to market.&lt;/p&gt;
&lt;p&gt;If the pipe is dumb, anyone can send a message easily, anyone can consume a message easily. They may need to adjust the format, but that's something they can do within their team.&lt;/p&gt;
&lt;p&gt;A truly stupid pipe should handle routing and that's it.&lt;/p&gt;
&lt;h2 id="illustration"&gt;Illustration&lt;/h2&gt;
&lt;p&gt;&lt;img src="https://learn.microsoft.com/en-us/dotnet/architecture/microservices/architect-microservice-container-applications/media/communication-in-microservice-architecture/sync-vs-async-patterns-across-microservices.png" alt="A diagram showing communications in a Microservices architecture" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Anti-patterns and patterns in communication between microservices &lt;a href="https://learn.microsoft.com/en-us/dotnet/architecture/microservices/architect-microservice-container-applications/communication-in-microservice-architecture"&gt;from learn.microsoft.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="rationale"&gt;Rationale&lt;/h2&gt;
&lt;p&gt;Summarizing all of the above, the benefits of smart endpoints and dumb pipes are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lower cost of messaging infrastructure - pushes the cost of goods sold closer to the producer and consumer. Allows messaging infrastructure to scale by the number of messages instead of the computational complexity of messages. License cost is reduced as fewer compute nodes are needed for message transit.&lt;/li&gt;
&lt;li&gt;Organization Scalability – teams aren’t reliant on transforms created by a centralized team.&lt;/li&gt;
&lt;li&gt;Low Latency – because computation is limited, messages are delivered more quickly and predictably to end consumers.&lt;/li&gt;
&lt;li&gt;Capacity and scalability of messaging infrastructure – increased significantly as compute is not part of the scale of the platform.&lt;/li&gt;
&lt;li&gt;Availability of messaging infrastructure – because computing is removed, so is a type of failure. As such, availability increases.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="assumptions"&gt;Assumptions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Messages will need to be in a defined format, which anyone can reference and understand on their own. An API with a contract is a good way to do this.&lt;/li&gt;
&lt;li&gt;Teams will need to adhere to contracts. These can be changed (issues, etc.), but this should be done properly.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://martinfowler.com/articles/microservices.html."&gt;Lewis, J. and Fowler, M. (2014) Microservices, martinfowler.com.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://akfpartners.com/growth-blog/architecture-principle-messaging-systems-smart-end-points-dumb-pipes"&gt;Architecture Principles: Messaging Systems – Smart End Points, Dumb Pipes | AKF Partners&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nathanpeck.com/microservice-principles-smart-endpoint-dumb-pipe/"&gt;Smart Endpoints and Dumb Pipes, Nathan Peck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.microsoft.com/en-us/dotnet/architecture/microservices/architect-microservice-container-applications/communication-in-microservice-architecture"&gt;Nishanil et al. (2022) Communication in a microservice architecture, learn.microsoft.com.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Security Principles</title>
			<link>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/principles/security-principles</link>
			<description>&lt;p&gt;As a business, we want to adopt a Zero-trust approach to our business and use of technology. This model provides the best combination of security and agility for our enterprise.&lt;/p&gt;</description>
			<enclosure url="https://red-sand-078a6ea03.3.azurestaticapps.net/media/header01.png" length="0" type="image" />
			<guid>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/principles/security-principles</guid>
			<pubDate>Thu, 11 May 2023 15:11:41 GMT</pubDate>
			<content:encoded>&lt;h2 id="statement"&gt;Statement&lt;/h2&gt;
&lt;p&gt;As a business, we want to adopt a Zero-trust approach to our business and use of technology. This model provides the best combination of security and agility for our enterprise.&lt;/p&gt;
&lt;h2 id="rationale"&gt;Rationale&lt;/h2&gt;
&lt;p&gt;Zero Trust is a mature target model in 2023. It supports the capabilities and organisation needs in the current climate and, properly implemented, it is proven to improve user experience and security posture.&lt;/p&gt;
&lt;p&gt;By commoditising the network, and assuming no device or user is anywhere safe, organisations can improve access to services AND improve security. In some cases, this can happen whilst overall costs come down, through a reduced vendor footprint and reduced local hosting, traffic and operations.&lt;/p&gt;
&lt;h2 id="approach"&gt;Approach&lt;/h2&gt;
&lt;p&gt;Zero Trust is a security approach built on three principles:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Verify Explicitly&lt;/li&gt;
&lt;li&gt;Use 'least privilege' access&lt;/li&gt;
&lt;li&gt;Assume Breach&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let's explore these three points.&lt;/p&gt;
&lt;h3 id="verify-explicitly"&gt;Verify Explicitly&lt;/h3&gt;
&lt;p&gt;Make use of the tools and data points available to validate that access is being granted to the right person or service, and that they are who they say they are. This should take into account things like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Geographic location.&lt;/li&gt;
&lt;li&gt;Device type, health and validity.&lt;/li&gt;
&lt;li&gt;Data Classification and Permissions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="use-least-privilege-access"&gt;Use 'Least Privilege' access&lt;/h3&gt;
&lt;p&gt;Make sure that people and services only have relevant access to their roles; no more or less. For escalated privileges, use concepts like Just-In-Time access to make sure that elevated logons are being approved, logged and cleared. This can also encompass:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Risk-based policies, that adapt the authentication to the level of risk.&lt;/li&gt;
&lt;li&gt;A 'Four eyes' principle, to make sure access to elevated roles is approved by a second person, reducing the risk of lone insider threat.&lt;/li&gt;
&lt;li&gt;Classify Data and Services according to value and risk and protect them appropriately.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="assume-breach"&gt;Assume Breach&lt;/h3&gt;
&lt;p&gt;Log and monitor access to services and data. Minimise the impact of any breach, by controlling shared resources and accounts. Try to avoid unnecessary dependencies or permissions. This can be done through:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Adding appropriate monitoring and logging to applications.&lt;/li&gt;
&lt;li&gt;Using single sign-on to ease tracking and logging.&lt;/li&gt;
&lt;li&gt;Using the Bulkhead pattern, to minimise the danger between services and threads.&lt;/li&gt;
&lt;li&gt;Actively monitor and control inputs, to help minimise breaches. Control access points and validate data entry.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="objective"&gt;Objective&lt;/h2&gt;
&lt;p&gt;Remove implicit trust throughout the environment and instead use processes, policies, and technologies to continuously authenticate and authorize entities as trustworthy before actually granting access&lt;/p&gt;
&lt;h2 id="implications"&gt;Implications&lt;/h2&gt;
&lt;p&gt;Adopting a zero-trust security model can benefit us by providing:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Better visibility into traffic and access patterns, which can result in better-developed and targeted systems.&lt;/li&gt;
&lt;li&gt;An enhanced user experience, typically with faster login times and lower password or account fatigue.&lt;/li&gt;
&lt;li&gt;A reduction in data breaches and an improvement in compliance.&lt;/li&gt;
&lt;li&gt;Reduction in the complexity of infrastructure and an improvement in security posture.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Improperly integrated or configured, this approach could result in:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Increased complexity and cost, often through having duplicate capabilities or the sprawl of security services and appliances.&lt;/li&gt;
&lt;li&gt;A lack of planning can result in expensive installations and purchases.&lt;/li&gt;
&lt;li&gt;Without a coherent policy around user access, friction can be increased as users fight with additional factors and complex passwords.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Bulkhead</title>
			<link>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/patterns-and-antipatterns/bulkhead</link>
			<description>The Bulkhead pattern encourages us to create barriers between services, to prevent disasters from affecting the whole application.</description>
			<enclosure url="https://red-sand-078a6ea03.3.azurestaticapps.net/media/header01.png" length="0" type="image" />
			<guid>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/patterns-and-antipatterns/bulkhead</guid>
			<pubDate>Wed, 10 May 2023 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;The Bulkhead pattern designs safe operation into applications, to ensure that a single failure cannot cause the loss of the whole application.&lt;/p&gt;
&lt;p&gt;There are different approaches to implementing a bulkhead, which all have the same outcome. It depends on how you need to contain the fault. It's easier to explain with some examples.&lt;/p&gt;
&lt;h3 id="isolating-faults"&gt;Isolating Faults&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Customers are divided over different container hosts, so state and session are spread across more than one physical instance. If the instance is lost, only a subset of customers are affected.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="limiting-thread-concurrency"&gt;Limiting Thread Concurrency&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Netflix use a system called Hystrix, which limits the number of concurrent threads to any given system. Effectively, Hysterix figures out when a component starts to reach capacity and limits the upstream threads, to bring the load down.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When designing around the bulkhead pattern, assume that there will be failures somewhere and assume that will have an impact. But try to work to contain and minimise that impact.&lt;/p&gt;
&lt;p&gt;To that end:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Minimise dependencies; share nearly nothing!&lt;/li&gt;
&lt;li&gt;Isolate faults, to limit fallout.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The pattern was popularised in the book, Release It! by M. Nygard.&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/30391809/what-is-bulkhead-pattern-used-by-hystrix"&gt;What is Bulkhead Pattern used by Hystrix? (2018) Stack Overflow.&lt;/a&gt; Accessed: 10 May 2023&lt;/li&gt;
&lt;li&gt;&lt;a href="https://akfpartners.com/growth-blog/bulkhead-pattern"&gt;Abbot, M. (2019). Microservice Bulkhead Pattern - Dos and Don’ts.&lt;/a&gt; Accessed 10 May 2023&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.oreilly.com/library/view/release-it-2nd/9781680504552/"&gt;Nygard, M.T. (2018) Release It! Pragmatic Bookshelf.‌&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.microsoft.com/en-us/azure/architecture/patterns/bulkhead"&gt;Bulkhead Pattern&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Microservices Anti-patterns</title>
			<link>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/patterns-and-antipatterns/microservices-anti-patterns</link>
			<description>Describes common anti-patterns or easy pitfalls of building a microservices application</description>
			<enclosure url="https://red-sand-078a6ea03.3.azurestaticapps.net/media/header01.png" length="0" type="image" />
			<guid>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/patterns-and-antipatterns/microservices-anti-patterns</guid>
			<pubDate>Wed, 10 May 2023 00:00:00 GMT</pubDate>
			<content:encoded>&lt;h2 id="anti-patterns-of-the-microservices-architecture"&gt;Anti-Patterns of the microservices architecture&lt;/h2&gt;
&lt;p&gt;A selection of common mistakes found in the wild.&lt;/p&gt;
&lt;h3 id="calls-in-series"&gt;Calls in Series&lt;/h3&gt;
&lt;p&gt;Many microservices architecture failures are the result of not properly understanding the way failure works in distributed systems. To calculate the SLA of multiple systems, you must multiply the availability of each dependent service together.&lt;/p&gt;
&lt;p&gt;If a system is built to have an availability of 99.5%, but it relies upon another service, with the same SLA of 99.5%, then the total SLA of that system is 99.0025%. If a third dependency is introduced with the same SLA of 99.5%, then we are down to 98.5%. This quickly adds up and gets exponentially worse.&lt;/p&gt;
&lt;p&gt;It's important to use asynchronous calls to prevent this, rather than calls in series. Incorporate a message bus or an event framework, and instead of waiting, your services can remain resilient.&lt;/p&gt;
&lt;p&gt;Reference: &lt;a href="https://akfpartners.com/growth-blog/microservice-anti-pattern-calls-in-series-the-xmas-tree-light-anti-pattern"&gt;AKF Partners: Microservices Anti-Patterns, 2019&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="distributed-monolith"&gt;Distributed Monolith&lt;/h3&gt;
&lt;p&gt;When you split a monolith, don't let your services become dependent on each
or several other microservices. If changes in services require redeployment or
change in other services, you've built a distributed monolith.
Lastly, over-dependency can also manifest in long deployment times, as too many
changes have to occur at once. Sometimes it shows that deployment has to
happen in a particular order.&lt;/p&gt;
&lt;p&gt;This is a &lt;a href="http://www.laputan.org/mud/mud.html#BigBallOfMud"&gt;Big-Ball-Of-Mud&lt;/a&gt; that also has network-level latencies to
deal with now.&lt;/p&gt;
&lt;h3 id="overly-chatty"&gt;Overly Chatty&lt;/h3&gt;
&lt;p&gt;The amount of communication between services must be considered. Services are distributed, so calls between them take time. Overly chatty services are not performant; the latency can kill the performance. Following &lt;a href="https://en.wikipedia.org/wiki/SOLID"&gt;SOLID&lt;/a&gt; principles can help here.&lt;/p&gt;
&lt;h3 id="shared-persistence"&gt;Shared Persistence&lt;/h3&gt;
&lt;p&gt;A monolith typically requires a large shared data store. As organisations redesign to microservices, thoughts around persistence may be overlooked, and traditional patterns followed. When you tie a service and a database together, you affect reliability. There is a recommendation to adopt a 0-1 database per service model.&lt;/p&gt;
&lt;p&gt;For many types of computing, such as Azure Functions, or AWS Lambda, databases may be unnecessary. If compute uses documents instead or responds to events or messages, then all the persistence could be encapsulated.&lt;/p&gt;
&lt;p&gt;in these cases, avoiding any real persistence helps to improve reliability, by removing unnecessary dependencies.&lt;/p&gt;
&lt;p&gt;Reference: &lt;a href="https://akfpartners.com/growth-blog/microservice-Architecture-principle-one-or-zero-databases-per-service"&gt;AKF Partners, Microservices Architecture Principle: One or Zero Databases per Service. 2022&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="entangled-data"&gt;Entangled Data&lt;/h3&gt;
&lt;p&gt;When all the services in your application can use database connections to get whatever they need, it becomes harder to unpick and separate them as services scale. The database starts to become a bottleneck, changes slow down as people need to extend things.. the natural next step is to separate the services into individual databases. Except, you have no idea what you need to separate. Congratulations, you have entangled data.&lt;/p&gt;
&lt;p&gt;To ensure you can scale as you need to, the data needs to be segregated into clear domains, which are readily identifiable and easy to access.&lt;/p&gt;
&lt;p&gt;A successful remedy to this problem can be to restrict inter-domain communication to API calls. By ensuring cross-service database calls are eliminated and contracted, defined borders are put in place, segregation is much easier to manage.&lt;/p&gt;
&lt;p&gt;This anti-pattern was seen as such a threat to the growth and agility of Amazon, that Jeff Bezos &lt;a href="https://nordicapis.com/the-bezos-api-mandate-amazons-manifesto-for-externalization/"&gt;threatened to fire anyone who followed it&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Reference: &lt;a href="https://www.techtarget.com/searchapparchitecture/tip/4-deadly-microservices-antipatterns-that-ruin-migration#:%7E:text=In%20an%20entangled%20data%20antipattern%2C%20all%20the%20services,modules%20and%20make%20structural%20changes%20to%20your%20architecture."&gt;TechTarget.com, 4 microservices antipatterns that ruin migration. 2020&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="improper-versioning"&gt;Improper Versioning&lt;/h3&gt;
&lt;p&gt;As part of an API strategy, contracted APIs enable a consumer to understand what they get and how they access that data. A mature API model allows a consumer to retrieve the right data and update the right systems, without needing to understand the underlying system. But, when the API changes, the integration will break.&lt;/p&gt;
&lt;p&gt;If the API supports clear versioning, then the consumer can stipulate a version and the service can respond. Having a contractual way to manage versioning and deprecation is critical to making resilient services.&lt;/p&gt;
&lt;p&gt;Microsoft suggests the following main versioning options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;URI&lt;/li&gt;
&lt;li&gt;Header&lt;/li&gt;
&lt;li&gt;Query string&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With URI-based versioning, the version is in the URI. If omitted the server would default to the most current, supported version.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GET https://api.service.com/store/v1.1/Products
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Header-based versioning encapsulates the version in the HTML header. You would include a custom header in the HTML HEAD tag, such as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Api-version: 1.0
Api-version: 1.1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With Query-string versioning, the version requested is an optional query string:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GET https://api.service.com/products/Products?api-version=v1.1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These methods are all supported in Azure API Manager.&lt;/p&gt;
&lt;h3 id="references"&gt;References&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://learn.microsoft.com/en-us/azure/api-management/api-management-versions"&gt;Microsoft.com - API Management&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Ambassador pattern</title>
			<link>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/patterns-and-antipatterns/ambassador-pattern</link>
			<description>An ambassador is often used to offload or mask client interoperability issues.</description>
			<enclosure url="https://red-sand-078a6ea03.3.azurestaticapps.net/media/header01.png" length="0" type="image" />
			<guid>https://red-sand-078a6ea03.3.azurestaticapps.net/posts/patterns-and-antipatterns/ambassador-pattern</guid>
			<pubDate>Wed, 10 May 2023 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;An out-of-process proxy that facilitates communication with a distant service. Colocated, usually in the same host/cluster to improve performance.&lt;/p&gt;
&lt;h2 id="description"&gt;Description&lt;/h2&gt;
&lt;p&gt;The ambassador pattern is used when a service needs some additional functionality, but it cannot be easily included alongside the main application. Often this is because the service was created by a third party, or is 'of an age'. An ambassador is a specialised sidecar, which is responsible for communicating with a service for the application.&lt;/p&gt;
&lt;h2 id="benefits"&gt;Benefits&lt;/h2&gt;
&lt;p&gt;An ambassador can extend a legacy service with new functionality to allow it to function alongside a new architecture.&lt;/p&gt;
&lt;h2 id="examples"&gt;Examples&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Adding asynchronous responses to a legacy synchronous process.&lt;/li&gt;
&lt;li&gt;To make a REST call to legacy API.&lt;/li&gt;
&lt;li&gt;Masking an insecure connection, to ensure that the public network is secured.&lt;/li&gt;
&lt;li&gt;Integrating a circuit breaker for a partner-hosted service.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="concerns"&gt;Concerns&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Adding an ambassador often entails creating a dependency. Sometimes the ambassador needs to be managed by a separate team, but will then require a release dependency.&lt;/li&gt;
&lt;li&gt;Is the added latency going to be workable with this application?&lt;/li&gt;
&lt;li&gt;Do you want to create a shared ambassador or spawn an instance per client?&lt;/li&gt;
&lt;li&gt;Consider a way to pass context to ease faultfinding.&lt;/li&gt;
&lt;li&gt;Hosting the ambassador close to the applications to minimise latency.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="when-to-use"&gt;When to use&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;If you have a legacy or partner service which cannot easily be replaced or updated to support necessary functionality, using an ambassador as a wrapper can assist in ensuring the service can work well with the rest of the application architecture.&lt;/li&gt;
&lt;li&gt;When you need to change the type of request/response to meet the need of a client, such as supporting stronger authentication or encryption, managing latency or aggregating responses to a chatty system.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="when-to-avoid"&gt;When to avoid&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;This pattern adds latency, so avoid it in a latency-sensitive environment.&lt;/li&gt;
&lt;li&gt;If only a single language is consuming the features; a library may be a better option.&lt;/li&gt;
&lt;li&gt;If connectivity features cannot be adequately optimised.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="approach"&gt;Approach&lt;/h2&gt;
&lt;p&gt;Microsoft cites an example of an ambassador which encapsulates:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Routing&lt;/li&gt;
&lt;li&gt;Circuit Breaker&lt;/li&gt;
&lt;li&gt;Logging&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To enable a legacy app to integrate to cloud services, and with mobile clients.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://learn.microsoft.com/en-us/azure/architecture/patterns/ambassador#example"&gt;Ambassador Example - learn.microsoft.com&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://learn.microsoft.com/en-us/azure/architecture/patterns/sidecar"&gt;Sidecar Pattern&lt;/a&gt; - An ambassador is a specialised sidecar.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.microsoft.com/en-us/azure/architecture/patterns/ambassador"&gt;Ambassador Pattern&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
	</channel>
</rss>